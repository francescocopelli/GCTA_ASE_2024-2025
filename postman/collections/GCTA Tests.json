{
	"info": {
		"_postman_id": "bfba4b2d-2608-45a7-a4cb-0a873b5c8200",
		"name": "GCTA Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "39572674-bfba4b2d-2608-45a7-a4cb-0a873b5c8200"
	},
	"item": [
		{
			"name": "GCTA E2E",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "35523caf-a98f-48ce-a2bc-b3f53f13f834",
								"exec": [
									"// Generate random username, password, and email\r",
									"const randomUsername = 'user_' + Math.random().toString(36).substring(2, 10); // Random username\r",
									"const randomPassword = Math.random().toString(36).substring(2, 12); // Random password\r",
									"const randomEmail = randomUsername + '@example.com'; // Random email based on the username\r",
									"\r",
									"// Set them as environment variables for use in the request\r",
									"pm.environment.set(\"username\", randomUsername);\r",
									"pm.environment.set(\"password\", randomPassword);\r",
									"pm.environment.set(\"email\", randomEmail);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c47097e0-aaf8-45b0-9200-bcaf6ae48a58",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required field - message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d04472a3-25ef-4235-b045-01273879bbdd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{email}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://127.0.0.1:8080/users/auth/register",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"users",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c999ff6-a275-458c-8c0f-b1224742ed0b",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields - message and session_token\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('session_token');\r",
									"\r",
									"});\r",
									"\r",
									"// Extract and save the session token\r",
									"const response = pm.response.json();\r",
									"if (response.session_token) {\r",
									"    pm.environment.set(\"session_token\", response.session_token);\r",
									"    console.log(\"Session token saved:\", response.session_token);\r",
									"} else {\r",
									"    console.log(\"Session token not found in the response.\");\r",
									"}\r",
									"pm.test(\"User_id is extracted and saved to an environment variable\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property('user_id');\r",
									"    pm.environment.set(\"user_id\", response.user_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9666a57b-6f24-4632-a929-9cdd430d9bce",
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "703658ef-dfbb-4336-8ef4-766dd0a83828",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "http://127.0.0.1:8080/users/auth/login",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"users",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Real Money Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b76a689-79a9-4809-8b3c-12dc646fb219",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  console.log(responseData.message)\r",
									"  pm.expect(responseData.message).to.equal(\"Account topped up successfully\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "fffc6529-4ad3-4515-9efa-31075932adee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": \"{{user_id}}\",\n  \"amount\": 50\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/player/real_money_transaction",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"player",
								"real_money_transaction"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6915f0a3-2c26-4354-9f40-46fe11c16a57",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required field - currency_balance\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.have.property('currency_balance');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Currency balance is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.currency_balance).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "4bbebbbe-cf0e-4161-a37e-e1a0856cfff4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/player/get_user_balance",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"player",
								"get_user_balance"
							]
						}
					},
					"response": []
				},
				{
					"name": "roll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains all required fields\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"message\");\r",
									"    pm.expect(responseJson).to.have.property(\"gacha_id\");\r",
									"    pm.expect(responseJson).to.have.property(\"name\");\r",
									"    pm.expect(responseJson).to.have.property(\"rarity\");\r",
									"});\r",
									"\r",
									"pm.test(\"Gacha rarity is valid\", function () {\r",
									"    const validRarities = [\"common\", \"rare\", \"epic\", \"legendary\"];\r",
									"    const rarity = pm.response.json().rarity;\r",
									"    pm.expect(validRarities).to.include(rarity);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains all required fields\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"message\");\r",
									"    pm.expect(responseJson).to.have.property(\"gacha_id\");\r",
									"    pm.expect(responseJson).to.have.property(\"name\");\r",
									"    pm.expect(responseJson).to.have.property(\"rarity\");\r",
									"\r",
									"    pm.environment.set(\"gacha_id\", responseJson.gacha_id);\r",
									"    console.log(responseJson.gacha_id);\r",
									"});\r",
									"\r",
									"pm.test(\"Gacha rarity is valid\", function () {\r",
									"    const validRarities = [\"common\", \"rare\", \"epic\", \"legendary\"];\r",
									"    const rarity = pm.response.json().rarity;\r",
									"    pm.expect(validRarities).to.include(rarity);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "24c9015c-5dec-4ba1-a5d5-9a8728c7684f"
							}
						}
					],
					"id": "0b2f3169-9799-4586-a055-2aa8550eeffb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": \"{{user_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/gacha/roll",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"roll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b77e36e2-4a6d-4639-b57b-50ac5bbf789a",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function (transaction) {\r",
									"        pm.expect(transaction).to.have.property('amount');\r",
									"        pm.expect(transaction).to.have.property('transaction_date');\r",
									"        pm.expect(transaction).to.have.property('transaction_id');\r",
									"        pm.expect(transaction).to.have.property('transaction_type');\r",
									"        pm.expect(transaction).to.have.property('user_id');\r",
									"    });\r",
									"    console.log(responseData[0].transaction_id)\r",
									"    // Get the most recent transaction (last item in the array)\r",
									"    let latestTransaction = responseData[responseData.length - 1];\r",
									"    // Log the latest transaction ID\r",
									"    console.log(latestTransaction.transaction_id);\r",
									"    pm.environment.set(\"transaction_id\", latestTransaction.transaction_id);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Amount is a non-negative number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(function (transaction) {\r",
									"        pm.expect(transaction.amount).to.be.a('number').and.to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"id": "9ba5ca11-fbaa-4cc4-a8b2-8494f390bd0b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/transaction/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5634f00d-c991-4c87-9c39-2bcb3b25bcca",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('amount');\r",
									"    pm.expect(responseData).to.have.property('transaction_date');\r",
									"    pm.expect(responseData).to.have.property('transaction_id');\r",
									"    pm.expect(responseData).to.have.property('transaction_type');\r",
									"    pm.expect(responseData).to.have.property('user_id');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Amount is a non-negative number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.amount).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7a8f9811-c6aa-49a6-a1c6-842c41bd3619",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/transaction/get_transaction?transaction_id={{transaction_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"get_transaction"
							],
							"query": [
								{
									"key": "transaction_id",
									"value": "{{transaction_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b03ad72-aed6-4204-90fb-015484f96fdc",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the response schema for required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(transaction) {\r",
									"        pm.expect(transaction).to.include.all.keys('amount', 'transaction_date', 'transaction_id', 'transaction_type', 'user_id');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "44fa24da-0bf5-4d7a-8a0c-a9d59f172848",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/transaction/get_user_transactions?user_id={{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"get_user_transactions"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get One Gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful retrieval\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains gacha item details\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"gacha_id\");\r",
									"    pm.expect(responseJson).to.have.property(\"name\");\r",
									"    pm.expect(responseJson).to.have.property(\"rarity\");\r",
									"    pm.expect(responseJson).to.have.property(\"status\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.description).to.exist;\r",
									"  pm.expect(responseData.gacha_id).to.exist;\r",
									"  pm.expect(responseData.image).to.exist;\r",
									"  pm.expect(responseData.name).to.exist;\r",
									"  pm.expect(responseData.rarity).to.exist;\r",
									"  pm.expect(responseData.status).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Gacha id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.gacha_id).to.exist;\r",
									"    pm.expect(responseData.gacha_id).to.be.a('number');\r",
									"    pm.expect(responseData.gacha_id).to.satisfy((val) => val >= 0, \"Gacha id should be non-negative\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Name should be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should be a non-empty string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Rarity should be a valid value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const validRarities = [\"common\", \"rare\", \"epic\", \"legendary\"];\r",
									"    pm.expect(responseData.rarity).to.be.oneOf(validRarities, \"Rarity should be a valid value\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "62277120-a6c1-49b9-8e82-acdb59a654b9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "35a21b96-c9b1-41a7-b4ac-1cf8bc803d40"
							}
						}
					],
					"id": "d6eca873-6e4a-491e-9e47-4ebae026551e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/get/{{gacha_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"get",
								"{{gacha_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Gachas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful retrieval\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Check that gachas have the correct data\r",
									"pm.test(\"Response contains gacha items array\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"message\").that.is.an(\"array\");\r",
									"    responseJson.message.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"gacha_id\");\r",
									"        pm.expect(item).to.have.property(\"name\");\r",
									"        pm.expect(item).to.have.property(\"rarity\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"// pm.test(\"Response time is within an acceptable range\", function () {\r",
									"//   pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"// });\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200 for successful retrieval\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - description, gacha_id, image, name, rarity, and status\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.be.an('array');\r",
									"\r",
									"    responseData.message.forEach(function (gacha) {\r",
									"        pm.expect(gacha).to.have.property('description');\r",
									"        pm.expect(gacha).to.have.property('gacha_id');\r",
									"        pm.expect(gacha).to.have.property('image');\r",
									"        pm.expect(gacha).to.have.property('name');\r",
									"        pm.expect(gacha).to.have.property('rarity');\r",
									"        pm.expect(gacha).to.have.property('status');\r",
									"    });\r",
									"    // console.log(responseData.message[6].gacha_id)\r",
									"    // pm.environment.set(\"gacha_id\", responseData.message[6].gacha_id);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "dabcb04e-5a59-4153-bdc4-c5cb2ba0b559"
							}
						}
					],
					"id": "ebdc91a5-0e30-41a8-a472-99f48f8bf7fb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Player Gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed response time test\r",
									"pm.test(\"Status code is 200 for successful update\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.acquired_date).to.exist;\r",
									"    pm.expect(responseData.description).to.exist;\r",
									"    pm.expect(responseData.gacha_id).to.exist;\r",
									"    pm.expect(responseData.image).to.exist;\r",
									"    pm.expect(responseData.locked).to.exist;\r",
									"    pm.expect(responseData.name).to.exist;\r",
									"    pm.expect(responseData.rarity).to.exist;\r",
									"    pm.expect(responseData.status).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Locked status is a boolean value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.locked).to.be.a('boolean');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "dfe4b8f2-97b8-43a1-bc29-23089b2eaec4"
							}
						}
					],
					"id": "d947076c-f224-411f-b578-220308fa9ca6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/get/{{user_id}}/{{gacha_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"get",
								"{{user_id}}",
								"{{gacha_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful retrieval\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains inventory array\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"inventory\").that.is.an(\"array\");\r",
									"    responseJson.inventory.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"gacha_id\");\r",
									"        pm.expect(item).to.have.property(\"name\");\r",
									"        pm.expect(item).to.have.property(\"rarity\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200 for successful retrieval\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the structure of each item in the inventory array\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.inventory).to.be.an('array').that.is.not.empty;\r",
									"    \r",
									"    responseData.inventory.forEach(item => {\r",
									"        pm.expect(item.acquired_date).to.be.a('string');\r",
									"        pm.expect(item.description).to.be.a('string');\r",
									"        pm.expect(item.gacha_id).to.be.a('number');\r",
									"        pm.expect(item.image).to.be.a('string');\r",
									"        pm.expect(item.locked).to.be.a('boolean');\r",
									"        pm.expect(item.name).to.be.a('string');\r",
									"        pm.expect(item.rarity).to.be.a('string');\r",
									"        pm.expect(item.status).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Ensure all items in the inventory array have the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.inventory).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    responseData.inventory.forEach(function(item) {\r",
									"        pm.expect(item.acquired_date).to.be.a('string');\r",
									"        pm.expect(item.description).to.be.a('string');\r",
									"        pm.expect(item.gacha_id).to.be.a('number');\r",
									"        pm.expect(item.image).to.be.a('string');\r",
									"        pm.expect(item.locked).to.be.a('boolean');\r",
									"        pm.expect(item.name).to.be.a('string');\r",
									"        pm.expect(item.rarity).to.be.a('string');\r",
									"        pm.expect(item.status).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "3d99779b-cfc6-4a14-a1f5-62b1241c1834"
							}
						}
					],
					"id": "37c31155-328b-447b-acef-1948d745be29",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/inventory/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"inventory",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Auction",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a031c641-8ab8-410c-9682-d416aef304c3",
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response schema matches the expected schema\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property('auction_id');\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "dc0dec20-9bd3-473a-9619-c9d77edd28fe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"gacha_id\": \"{{gacha_id}}\",\n  \"seller_id\": \"{{user_id}}\",\n  \"base_price\": 7\n}"
						},
						"url": {
							"raw": "{{base_url}}/auction/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Auctions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42390b81-c632-4d9d-bc4c-bf32e1bc8c5d",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.auctions).to.be.an('array');\r",
									"    responseData.auctions.forEach(function (auction) {\r",
									"        pm.expect(auction.auction_id).to.exist;\r",
									"        pm.expect(auction.base_price).to.exist;\r",
									"        // pm.expect(auction.buyer_id).to.exist;\r",
									"        pm.expect(auction.end_time).to.exist;\r",
									"        pm.expect(auction.gacha_id).to.exist;\r",
									"        pm.expect(auction.highest_bid).to.exist;\r",
									"        pm.expect(auction.seller_id).to.exist;\r",
									"        pm.expect(auction.status).to.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Save the auction_id of the last auction\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const lastAuction = responseData.auctions[responseData.auctions.length - 1];\r",
									"    pm.environment.set(\"last_auction_id\", lastAuction.auction_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7de475bb-53fa-4c32-a252-6b2112f9364a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction/all_active",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"all_active"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Gacha Auctions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16106d10-8d94-4db0-be94-2b20a9a35be3",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function (auction) {\r",
									"        pm.expect(auction.auction_id).to.exist;\r",
									"        pm.expect(auction.base_price).to.exist;\r",
									"        pm.expect(auction).to.have.property('buyer_id');\r",
									"        pm.expect(auction.buyer_id).to.be.oneOf([null, auction.buyer_id]);\r",
									"        pm.expect(auction.end_time).to.exist;\r",
									"        pm.expect(auction.gacha_id).to.exist;\r",
									"        pm.expect(auction.highest_bid).to.exist;\r",
									"        pm.expect(auction.seller_id).to.exist;\r",
									"        pm.expect(auction.status).to.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Auction_id is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(function (auction) {\r",
									"        pm.expect(auction.auction_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Auction_id should not be empty\");\r",
									"\r",
									"        console.log(responseData[0].auction_id)\r",
									"        pm.environment.set(\"auction_id\", responseData[0].auction_id)\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Highest_bid is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(function (auction) {\r",
									"        pm.expect(auction.highest_bid).to.be.a('number');\r",
									"        pm.expect(auction.highest_bid).to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the schema of the response body\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function (item) {\r",
									"        pm.expect(item).to.be.an('object');\r",
									"        pm.expect(item.auction_id).to.be.a('string');\r",
									"        pm.expect(item.base_price).to.satisfy(value => typeof value === 'number' || value === null, 'base_price should be a number or null');\r",
									"        pm.expect(item).to.have.property('buyer_id');\r",
									"        pm.expect(item.buyer_id).to.be.oneOf([null, item.buyer_id]);\r",
									"        pm.expect(item.end_time).to.be.a('string');\r",
									"        pm.expect(item.gacha_id).to.be.a('number');\r",
									"        pm.expect(item).to.have.property('highest_bid');\r",
									"        pm.expect(item.highest_bid).to.be.oneOf([null, item.highest_bid]);\r",
									"        pm.expect(item.seller_id).to.be.a('number');\r",
									"        pm.expect(item.status).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c11db60d-44b5-4900-8a5d-b6ccd0c3167c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction//get_gacha_auctions?gacha_id={{gacha_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"",
								"get_gacha_auctions"
							],
							"query": [
								{
									"key": "gacha_id",
									"value": "{{gacha_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Place Bid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9c52e95-ba93-44b3-81b9-80ee1801a81d",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response schema matches the expected schema\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message field is present in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a9bea999-f6ed-4fcc-86ae-f142d16abb5e",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0e5a92ad-a416-438d-b9ac-3e89e48a1366",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"auction_id\": \"{{auction_id}}\",\n  \"user_id\": \"1\",\n  \"bid_amount\": 13\n}"
						},
						"url": {
							"raw": "{{base_url}}/auction/bid",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"bid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Bids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.bids).to.be.an('array');\r",
									"    \r",
									"    responseData.bids.forEach(function(bid) {\r",
									"        pm.expect(bid.auction_id).to.exist;\r",
									"        pm.expect(bid.bid_amount).to.exist;\r",
									"        pm.expect(bid.bid_id).to.exist;\r",
									"        pm.expect(bid.bid_time).to.exist;\r",
									"        pm.expect(bid.user_id).to.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Bids array is present and contains expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.bids).to.exist.and.to.be.an('array');\r",
									"    pm.expect(responseData.bids.length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Bids data properties validation\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.bids).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    responseData.bids.forEach(function(bid) {\r",
									"        pm.expect(bid.auction_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Auction ID should be a non-empty string\");\r",
									"        pm.expect(bid.bid_amount).to.be.a('number').and.to.be.at.least(0, \"Bid amount should be a non-negative integer\");\r",
									"        pm.expect(bid.bid_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Bid ID should be a non-empty string\");\r",
									"        pm.expect(bid.user_id).to.be.a('number').and.to.be.at.least(0, \"User ID should be a non-negative integer\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "e16aade4-99f4-4643-982f-3b98a40d5246"
							}
						}
					],
					"id": "d8c42821-aa01-43be-b288-1f2b8ee75971",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction//bids?auction_id={{last_auction_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"",
								"bids"
							],
							"query": [
								{
									"key": "auction_id",
									"value": "{{last_auction_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba08d5b4-3bd3-46e4-98c7-e168d9127de9",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c8c0426a-826c-4819-a4c0-ceff8cca0d20",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"session_token\": \"{{session_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"id": "ad5b75ad-346e-4817-8b1b-23fa1ea97024"
		},
		{
			"name": "GCTA Negative Tests",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c36a942a-aa8e-48c0-8f39-45b6adc9c50a",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6b2fe56a-4925-41c7-af88-8447851ee2f8",
								"exec": [
									"pm.test(\"Response status code is 400 for invalid input\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400); // Adjust expected code based on API behavior\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is provided\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.exist;\r",
									"    pm.expect(response.error).to.include(\"Invalid email address\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "820c0fdb-cb7d-4c05-89ab-1507068b05f1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "invalidemail",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/users/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401 for incorrect credentials\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"Invalid credentials\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "44c7d37f-9062-4c9b-9b12-16fc21ed66cb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "6a4c0df5-50ff-4bd1-9ec9-58f2f4b11021"
							}
						}
					],
					"id": "a4eb4990-04b0-4cf8-b7b8-a71ab18697e5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"nonexistentuser\",\n    \"password\": \"somepassword\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Real Money Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4cc553e4-1e2d-43e1-b18e-c31b3c4acc59",
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"401 Unauthorized: Token mismatch!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b9da7406-ae5e-4f71-a351-3b7cc03a3d65",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": \"9999999999\",\n  \"amount\": 50\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/player/real_money_transaction",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"player",
								"real_money_transaction"
							]
						}
					},
					"response": []
				},
				{
					"name": "roll",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf8b51e9-0cb3-4f4a-9860-5d75776e60c1",
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"401 Unauthorized: Token mismatch!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "fb51285b-bea7-49ce-8bb2-b5ce623ef47b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": \"9999999999\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/gacha/roll",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"roll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1dd74aea-8bf2-442a-8427-c500e224f49e",
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"Transaction not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dee3f865-0f2d-4ce6-8613-ecaf90beb634",
								"exec": [
									"const loginUrl = \"http://127.0.0.1:8080/users/auth/login\";\r",
									"\r",
									"// Recupera le credenziali dalle variabili di ambiente\r",
									"const username = pm.environment.get(\"username\");\r",
									"const password = pm.environment.get(\"password\");\r",
									"\r",
									"const payload = {\r",
									"    username: username,\r",
									"    password: password\r",
									"};\r",
									"\r",
									"const requestOptions = {\r",
									"    url: loginUrl,\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: JSON.stringify(payload)\r",
									"};\r",
									"\r",
									"// Esegui la richiesta di login\r",
									"pm.sendRequest(requestOptions, function (err, res) {\r",
									"    if (err) {\r",
									"        console.error(\"Errore durante il login:\", err);\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    // Salva il token nelle variabili di ambiente se esiste\r",
									"    const responseJson = res.json();\r",
									"    if (responseJson.session_token) {\r",
									"        pm.environment.set(\"session_token\", responseJson.session_token);\r",
									"        console.log(\"Token salvato:\", responseJson.session_token);\r",
									"    } else {\r",
									"        console.warn(\"Login fallito: Nessun token trovato nella risposta.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "24e938fe-30cf-4e1b-98ea-2804797a423b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/transaction/get_transaction?transaction_id=9999999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"get_transaction"
							],
							"query": [
								{
									"key": "transaction_id",
									"value": "9999999999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get One Gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"Gacha item not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "c2acee59-ebbb-4832-aa86-4ca41a636a23"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "d5c41ce8-1ed3-465a-9b44-264d8e6e12ad"
							}
						}
					],
					"id": "e9d09ee0-758c-418a-bcbf-0579b6c206cd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/get/9999999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"get",
								"9999999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Player Gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"401 Unauthorized\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "e5a30456-7e02-4ed2-a727-718ac6be411d"
							}
						}
					],
					"id": "68a23c38-52e7-4105-acd3-4ee16e7bf166",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/get/{{user_id}}/99999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"get",
								"{{user_id}}",
								"99999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"401 Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "a89ea531-4fb4-4f08-97fb-c3e3eb384821"
							}
						}
					],
					"id": "9322ad68-c70a-4015-8564-1c083d8d412e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/inventory/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"inventory",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Auction",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3b5300d-fd96-476d-8634-1bb74d2dc09b",
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"Gacha is locked or does not exist\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6e4c5940-2bd2-4cb0-b4a8-bcaff4365d32",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"gacha_id\": \"noexistentgacha\",\n  \"seller_id\": \"{{user_id}}\",\n  \"base_price\": 7\n}"
						},
						"url": {
							"raw": "{{base_url}}/auction/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Auctions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bb61dc65-f4fa-4825-9252-110b4670b8e2",
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"401 Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f7a2c895-da21-46bf-ab55-a1cb8ddc58c4",
								"exec": [
									"const loginUrl = \"http://127.0.0.1:8080/users/auth/login\";\r",
									"\r",
									"// Recupera le credenziali dalle variabili di ambiente\r",
									"const username = pm.environment.get(\"username\");\r",
									"const password = pm.environment.get(\"password\");\r",
									"\r",
									"const payload = {\r",
									"    username: username,\r",
									"    password: password\r",
									"};\r",
									"\r",
									"const requestOptions = {\r",
									"    url: loginUrl,\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: JSON.stringify(payload)\r",
									"};\r",
									"\r",
									"// Esegui la richiesta di login\r",
									"pm.sendRequest(requestOptions, function (err, res) {\r",
									"    if (err) {\r",
									"        console.error(\"Errore durante il login:\", err);\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    // Salva il token nelle variabili di ambiente se esiste\r",
									"    const responseJson = res.json();\r",
									"    if (responseJson.session_token) {\r",
									"        pm.environment.set(\"session_token\", responseJson.session_token);\r",
									"        console.log(\"Token salvato:\", responseJson.session_token);\r",
									"    } else {\r",
									"        console.warn(\"Login fallito: Nessun token trovato nella risposta.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "75c7664d-5c40-4a7e-a543-152ba694faa3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Gacha Auctions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "10376825-5f59-4e08-a612-b70018c2fcf5",
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"No auctions found for the gacha\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9f9db7a8-402d-4272-b57e-73048b2e9660",
								"exec": [
									"const loginUrl = \"http://127.0.0.1:8080/users/auth/login\";\r",
									"\r",
									"// Recupera le credenziali dalle variabili di ambiente\r",
									"const username = pm.environment.get(\"username\");\r",
									"const password = pm.environment.get(\"password\");\r",
									"\r",
									"const payload = {\r",
									"    username: username,\r",
									"    password: password\r",
									"};\r",
									"\r",
									"const requestOptions = {\r",
									"    url: loginUrl,\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: JSON.stringify(payload)\r",
									"};\r",
									"\r",
									"// Esegui la richiesta di login\r",
									"pm.sendRequest(requestOptions, function (err, res) {\r",
									"    if (err) {\r",
									"        console.error(\"Errore durante il login:\", err);\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    // Salva il token nelle variabili di ambiente se esiste\r",
									"    const responseJson = res.json();\r",
									"    if (responseJson.session_token) {\r",
									"        pm.environment.set(\"session_token\", responseJson.session_token);\r",
									"        console.log(\"Token salvato:\", responseJson.session_token);\r",
									"    } else {\r",
									"        console.warn(\"Login fallito: Nessun token trovato nella risposta.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a288f4f8-16d9-4492-9a06-9873f22f9b97",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction/get_gacha_auctions?gacha_id=99999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"get_gacha_auctions"
							],
							"query": [
								{
									"key": "gacha_id",
									"value": "99999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Place Bid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9863598f-e2a2-48ea-84fe-2b83c2e04d3c",
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"Auction not found or already ended\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a8cb8fc7-ecea-4a7b-bfe0-723918c7b5a8",
								"exec": [
									"const loginUrl = \"http://127.0.0.1:8080/users/auth/login\";\r",
									"\r",
									"// Recupera le credenziali dalle variabili di ambiente\r",
									"const username = pm.environment.get(\"username\");\r",
									"const password = pm.environment.get(\"password\");\r",
									"\r",
									"const payload = {\r",
									"    username: username,\r",
									"    password: password\r",
									"};\r",
									"\r",
									"const requestOptions = {\r",
									"    url: loginUrl,\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: JSON.stringify(payload)\r",
									"};\r",
									"\r",
									"// Esegui la richiesta di login\r",
									"pm.sendRequest(requestOptions, function (err, res) {\r",
									"    if (err) {\r",
									"        console.error(\"Errore durante il login:\", err);\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    // Salva il token nelle variabili di ambiente se esiste\r",
									"    const responseJson = res.json();\r",
									"    if (responseJson.session_token) {\r",
									"        pm.environment.set(\"session_token\", responseJson.session_token);\r",
									"        console.log(\"Token salvato:\", responseJson.session_token);\r",
									"    } else {\r",
									"        console.warn(\"Login fallito: Nessun token trovato nella risposta.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "644d8d69-2e5a-4221-9b9b-f7b1bc405810",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"auction_id\": \"99999999\",\n  \"user_id\": \"1\",\n  \"bid_amount\": 13\n}"
						},
						"url": {
							"raw": "{{base_url}}/auction/bid",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"bid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Bids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"Missing auction_id parameter\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "ac3e53e0-fdd6-4511-9ce6-d2786043258c"
							}
						}
					],
					"id": "37f39e43-955e-42ed-aa19-6539f9916abd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction/bids?auction_id=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"bids"
							],
							"query": [
								{
									"key": "auction_id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bbea3d92-ee62-4b47-80ae-9b4c4aba0c00",
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"401 Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7d63e13c-623c-4fcf-ab6b-312bf929470a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"session_token\": \"nosession\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"id": "9a52061c-a95b-4ca8-b18d-8de7c54342d0"
		}
	]
}