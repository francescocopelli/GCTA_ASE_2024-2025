{
	"info": {
		"_postman_id": "186c68b1-d2d9-48aa-a3e9-685316267382",
		"name": "GCTA Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "39570797-186c68b1-d2d9-48aa-a3e9-685316267382"
	},
	"item": [
		{
			"name": "GCTA E2E",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "327f0a15-4477-4385-9626-fe71d99398bd",
								"exec": [
									"// Generate random username, password, and email\r",
									"const randomUsername = 'user_' + Math.random().toString(36).substring(2, 10); // Random username\r",
									"const randomPassword = Math.random().toString(36).substring(2, 12); // Random password\r",
									"const randomEmail = randomUsername + '@example.com'; // Random email based on the username\r",
									"\r",
									"// Set them as environment variables for use in the request\r",
									"pm.environment.set(\"username\", randomUsername);\r",
									"pm.environment.set(\"password\", randomPassword);\r",
									"pm.environment.set(\"email\", randomEmail);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "670b1c40-4081-4e19-b1d7-a781ac5c5e2f",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required field - message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "810277f0-773c-4a47-825b-71e53015de79",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{email}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/users/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa4ddfa9-acfd-4270-b12b-137261561478",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields - message and session_token\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('session_token');\r",
									"\r",
									"});\r",
									"\r",
									"// Extract and save the session token\r",
									"const response = pm.response.json();\r",
									"if (response.session_token) {\r",
									"    pm.environment.set(\"session_token\", response.session_token);\r",
									"    console.log(\"Session token saved:\", response.session_token);\r",
									"} else {\r",
									"    console.log(\"Session token not found in the response.\");\r",
									"}\r",
									"pm.test(\"User_id is extracted and saved to an environment variable\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property('user_id');\r",
									"    pm.environment.set(\"user_id\", response.user_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0baf51e3-6a95-4bd8-bf92-a720cf4c2d02",
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d0115844-1433-417a-927e-e548e0f55ec0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Real Money Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  console.log(responseData.message)\r",
									"  pm.expect(responseData.message).to.equal(\"Account topped up successfully\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f4a94886-ea14-4c2d-82fc-5e3a1ae7dfdb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": \"{{user_id}}\",\n  \"amount\": 50\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/player/real_money_transaction",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"player",
								"real_money_transaction"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required field - currency_balance\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.have.property('currency_balance');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Currency balance is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.currency_balance).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b1314c81-45a5-442b-9ab3-fb3940343c93",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/player/get_user_balance",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"player",
								"get_user_balance"
							]
						}
					},
					"response": []
				},
				{
					"name": "roll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains all required fields\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"message\");\r",
									"    pm.expect(responseJson).to.have.property(\"gacha_id\");\r",
									"    pm.expect(responseJson).to.have.property(\"name\");\r",
									"    pm.expect(responseJson).to.have.property(\"rarity\");\r",
									"});\r",
									"\r",
									"pm.test(\"Gacha rarity is valid\", function () {\r",
									"    const validRarities = [\"common\", \"rare\", \"epic\", \"legendary\"];\r",
									"    const rarity = pm.response.json().rarity;\r",
									"    pm.expect(validRarities).to.include(rarity);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains all required fields\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"message\");\r",
									"    pm.expect(responseJson).to.have.property(\"gacha_id\");\r",
									"    pm.expect(responseJson).to.have.property(\"name\");\r",
									"    pm.expect(responseJson).to.have.property(\"rarity\");\r",
									"\r",
									"    pm.environment.set(\"gacha_id\", responseJson.gacha_id);\r",
									"    console.log(responseJson.gacha_id);\r",
									"});\r",
									"\r",
									"pm.test(\"Gacha rarity is valid\", function () {\r",
									"    const validRarities = [\"common\", \"rare\", \"epic\", \"legendary\"];\r",
									"    const rarity = pm.response.json().rarity;\r",
									"    pm.expect(validRarities).to.include(rarity);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "3910dcff-b39b-423b-b6f5-9f7499dfe983",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": \"{{user_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/gacha/roll",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"roll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function (transaction) {\r",
									"        pm.expect(transaction).to.have.property('amount');\r",
									"        pm.expect(transaction).to.have.property('transaction_date');\r",
									"        pm.expect(transaction).to.have.property('transaction_id');\r",
									"        pm.expect(transaction).to.have.property('transaction_type');\r",
									"        pm.expect(transaction).to.have.property('user_id');\r",
									"    });\r",
									"    console.log(responseData[0].transaction_id)\r",
									"    // Get the most recent transaction (last item in the array)\r",
									"    let latestTransaction = responseData[responseData.length - 1];\r",
									"    // Log the latest transaction ID\r",
									"    console.log(latestTransaction.transaction_id);\r",
									"    pm.environment.set(\"transaction_id\", latestTransaction.transaction_id);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Amount is a non-negative number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(function (transaction) {\r",
									"        pm.expect(transaction.amount).to.be.a('number').and.to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"id": "6dc69d3b-6d72-4dbd-ab2e-ba5ea7a4b72e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/transaction/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('amount');\r",
									"    pm.expect(responseData).to.have.property('transaction_date');\r",
									"    pm.expect(responseData).to.have.property('transaction_id');\r",
									"    pm.expect(responseData).to.have.property('transaction_type');\r",
									"    pm.expect(responseData).to.have.property('user_id');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Amount is a non-negative number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.amount).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a543059d-378e-41bc-8f2a-0d2e357dc885",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/transaction/get_transaction?transaction_id={{transaction_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"get_transaction"
							],
							"query": [
								{
									"key": "transaction_id",
									"value": "{{transaction_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the response schema for required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(transaction) {\r",
									"        pm.expect(transaction).to.include.all.keys('amount', 'transaction_date', 'transaction_id', 'transaction_type', 'user_id');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "18ad9ad1-74e5-41b9-bc01-5016cfe941be",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/transaction/get_user_transactions?user_id={{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"get_user_transactions"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get One Gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful retrieval\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains gacha item details\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"gacha_id\");\r",
									"    pm.expect(responseJson).to.have.property(\"name\");\r",
									"    pm.expect(responseJson).to.have.property(\"rarity\");\r",
									"    pm.expect(responseJson).to.have.property(\"status\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.description).to.exist;\r",
									"  pm.expect(responseData.gacha_id).to.exist;\r",
									"  pm.expect(responseData.image).to.exist;\r",
									"  pm.expect(responseData.name).to.exist;\r",
									"  pm.expect(responseData.rarity).to.exist;\r",
									"  pm.expect(responseData.status).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Gacha id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.gacha_id).to.exist;\r",
									"    pm.expect(responseData.gacha_id).to.be.a('number');\r",
									"    pm.expect(responseData.gacha_id).to.satisfy((val) => val >= 0, \"Gacha id should be non-negative\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Name should be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should be a non-empty string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Rarity should be a valid value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const validRarities = [\"common\", \"rare\", \"epic\", \"legendary\"];\r",
									"    pm.expect(responseData.rarity).to.be.oneOf(validRarities, \"Rarity should be a valid value\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "efe1814d-68ea-4b5c-ab20-6928b0e95d45",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/get/{{gacha_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"get",
								"{{gacha_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Gachas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful retrieval\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Check that gachas have the correct data\r",
									"pm.test(\"Response contains gacha items array\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"message\").that.is.an(\"array\");\r",
									"    responseJson.message.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"gacha_id\");\r",
									"        pm.expect(item).to.have.property(\"name\");\r",
									"        pm.expect(item).to.have.property(\"rarity\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"// pm.test(\"Response time is within an acceptable range\", function () {\r",
									"//   pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"// });\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200 for successful retrieval\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - description, gacha_id, image, name, rarity, and status\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.be.an('array');\r",
									"\r",
									"    responseData.message.forEach(function (gacha) {\r",
									"        pm.expect(gacha).to.have.property('description');\r",
									"        pm.expect(gacha).to.have.property('gacha_id');\r",
									"        pm.expect(gacha).to.have.property('image');\r",
									"        pm.expect(gacha).to.have.property('name');\r",
									"        pm.expect(gacha).to.have.property('rarity');\r",
									"        pm.expect(gacha).to.have.property('status');\r",
									"    });\r",
									"    // console.log(responseData.message[6].gacha_id)\r",
									"    // pm.environment.set(\"gacha_id\", responseData.message[6].gacha_id);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0deefef0-db03-4788-b275-c2423d3e32a8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Player Gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed response time test\r",
									"pm.test(\"Status code is 200 for successful update\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.acquired_date).to.exist;\r",
									"    pm.expect(responseData.description).to.exist;\r",
									"    pm.expect(responseData.gacha_id).to.exist;\r",
									"    pm.expect(responseData.image).to.exist;\r",
									"    pm.expect(responseData.locked).to.exist;\r",
									"    pm.expect(responseData.name).to.exist;\r",
									"    pm.expect(responseData.rarity).to.exist;\r",
									"    pm.expect(responseData.status).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Locked status is a boolean value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.locked).to.be.a('boolean');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "55e5b132-d73a-4ca0-8550-8d5d57d608da",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/get/{{user_id}}/{{gacha_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"get",
								"{{user_id}}",
								"{{gacha_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful retrieval\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains inventory array\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"inventory\").that.is.an(\"array\");\r",
									"    responseJson.inventory.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"gacha_id\");\r",
									"        pm.expect(item).to.have.property(\"name\");\r",
									"        pm.expect(item).to.have.property(\"rarity\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200 for successful retrieval\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the structure of each item in the inventory array\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.inventory).to.be.an('array').that.is.not.empty;\r",
									"    \r",
									"    responseData.inventory.forEach(item => {\r",
									"        pm.expect(item.acquired_date).to.be.a('string');\r",
									"        pm.expect(item.description).to.be.a('string');\r",
									"        pm.expect(item.gacha_id).to.be.a('number');\r",
									"        pm.expect(item.image).to.be.a('string');\r",
									"        pm.expect(item.locked).to.be.a('boolean');\r",
									"        pm.expect(item.name).to.be.a('string');\r",
									"        pm.expect(item.rarity).to.be.a('string');\r",
									"        pm.expect(item.status).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Ensure all items in the inventory array have the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.inventory).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    responseData.inventory.forEach(function(item) {\r",
									"        pm.expect(item.acquired_date).to.be.a('string');\r",
									"        pm.expect(item.description).to.be.a('string');\r",
									"        pm.expect(item.gacha_id).to.be.a('number');\r",
									"        pm.expect(item.image).to.be.a('string');\r",
									"        pm.expect(item.locked).to.be.a('boolean');\r",
									"        pm.expect(item.name).to.be.a('string');\r",
									"        pm.expect(item.rarity).to.be.a('string');\r",
									"        pm.expect(item.status).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6884a391-5aa9-4637-82fd-3c9fca47cf52",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/inventory/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"inventory",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Auction",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3871bc74-6561-4e8e-958e-d3493588c2f4",
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response schema matches the expected schema\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property('auction_id');\r",
									"    if (responseData.auction_id){\r",
									"        pm.environment.set(\"auction_id\",responseData.auction_id);\r",
									"        console.log(\"setting auction_id: \"+responseData.auction_id);\r",
									"    }\r",
									"    else\r",
									"        console.log(\"auction_id not found\");\r",
									"\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "798fccd4-b29b-4b2b-a1a2-0767e2d978f5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"gacha_id\": \"{{gacha_id}}\",\n  \"seller_id\": \"{{user_id}}\",\n  \"base_price\": 7\n}"
						},
						"url": {
							"raw": "{{base_url}}/auction/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Auctions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.auctions).to.be.an('array');\r",
									"    responseData.auctions.forEach(function (auction) {\r",
									"        pm.expect(auction.auction_id).to.exist;\r",
									"        pm.expect(auction.base_price).to.exist;\r",
									"        // pm.expect(auction.buyer_id).to.exist;\r",
									"        pm.expect(auction.end_time).to.exist;\r",
									"        pm.expect(auction.gacha_id).to.exist;\r",
									"        pm.expect(auction.highest_bid).to.exist;\r",
									"        pm.expect(auction.seller_id).to.exist;\r",
									"        pm.expect(auction.status).to.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Save the auction_id of the last auction\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const lastAuction = responseData.auctions[responseData.auctions.length - 1];\r",
									"    pm.environment.set(\"last_auction_id\", lastAuction.auction_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b8f3ab97-c77f-44da-bd22-71e358594e50",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction/all_active",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"all_active"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Gacha Auctions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function (auction) {\r",
									"        pm.expect(auction.auction_id).to.exist;\r",
									"        pm.expect(auction.base_price).to.exist;\r",
									"        pm.expect(auction).to.have.property('buyer_id');\r",
									"        pm.expect(auction.buyer_id).to.be.oneOf([null, auction.buyer_id]);\r",
									"        pm.expect(auction.end_time).to.exist;\r",
									"        pm.expect(auction.gacha_id).to.exist;\r",
									"        pm.expect(auction.highest_bid).to.exist;\r",
									"        pm.expect(auction.seller_id).to.exist;\r",
									"        pm.expect(auction.status).to.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Auction_id is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(function (auction) {\r",
									"        pm.expect(auction.auction_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Auction_id should not be empty\");\r",
									"\r",
									"        console.log(responseData[0].auction_id)\r",
									"        pm.environment.set(\"auction_id\", responseData[0].auction_id)\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Highest_bid is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(function (auction) {\r",
									"        pm.expect(auction.highest_bid).to.be.a('number');\r",
									"        pm.expect(auction.highest_bid).to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the schema of the response body\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function (item) {\r",
									"        pm.expect(item).to.be.an('object');\r",
									"        pm.expect(item.auction_id).to.be.a('string');\r",
									"        pm.expect(item.base_price).to.satisfy(value => typeof value === 'number' || value === null, 'base_price should be a number or null');\r",
									"        pm.expect(item).to.have.property('buyer_id');\r",
									"        pm.expect(item.buyer_id).to.be.oneOf([null, item.buyer_id]);\r",
									"        pm.expect(item.end_time).to.be.a('string');\r",
									"        pm.expect(item.gacha_id).to.be.a('number');\r",
									"        pm.expect(item).to.have.property('highest_bid');\r",
									"        pm.expect(item.highest_bid).to.be.oneOf([null, item.highest_bid]);\r",
									"        pm.expect(item.seller_id).to.be.a('number');\r",
									"        pm.expect(item.status).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7f901a54-9c04-4670-a494-62ee7a4cdf32",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction//get_gacha_auctions?gacha_id={{gacha_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"",
								"get_gacha_auctions"
							],
							"query": [
								{
									"key": "gacha_id",
									"value": "{{gacha_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Place Bid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response schema matches the expected schema\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message field is present in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "dd4c0f6b-509f-4689-951f-d70f8232296f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"auction_id\": \"{{auction_id}}\",\n  \"user_id\": \"1\",\n  \"bid_amount\": 13\n}"
						},
						"url": {
							"raw": "{{base_url}}/auction/bid",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"bid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Bids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.bids).to.be.an('array');\r",
									"    \r",
									"    responseData.bids.forEach(function(bid) {\r",
									"        pm.expect(bid.auction_id).to.exist;\r",
									"        pm.expect(bid.bid_amount).to.exist;\r",
									"        pm.expect(bid.bid_id).to.exist;\r",
									"        pm.expect(bid.bid_time).to.exist;\r",
									"        pm.expect(bid.user_id).to.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Bids array is present and contains expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.bids).to.exist.and.to.be.an('array');\r",
									"    pm.expect(responseData.bids.length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Bids data properties validation\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.bids).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    responseData.bids.forEach(function(bid) {\r",
									"        pm.expect(bid.auction_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Auction ID should be a non-empty string\");\r",
									"        pm.expect(bid.bid_amount).to.be.a('number').and.to.be.at.least(0, \"Bid amount should be a non-negative integer\");\r",
									"        pm.expect(bid.bid_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Bid ID should be a non-empty string\");\r",
									"        pm.expect(bid.user_id).to.be.a('number').and.to.be.at.least(0, \"User ID should be a non-negative integer\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "5d6418b1-3c9b-4de3-b3e0-bef7afed3040",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction//bids?auction_id={{last_auction_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"",
								"bids"
							],
							"query": [
								{
									"key": "auction_id",
									"value": "{{last_auction_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9b613d26-8d90-4833-a151-c795ada826c6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"session_token\": \"{{session_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"id": "8ed69411-e513-41bd-9f68-d8ee7da79800"
		},
		{
			"name": "GCTA Negative Tests",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400 for invalid input\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400); // Adjust expected code based on API behavior\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is provided\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.exist;\r",
									"    pm.expect(response.error).to.include(\"Invalid email address\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a6a0dafb-0fbd-4855-9318-546c8bc546bd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "invalidemail",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/users/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401 for incorrect credentials\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"Invalid credentials\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d8d67473-f91f-48f2-b4c2-73d57ba03a82",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"nonexistentuser\",\n    \"password\": \"somepassword\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Real Money Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"401 Unauthorized: Token mismatch!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "2a177f5d-18f1-46df-8a22-e89c8d3bb976",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": \"9999999999\",\n  \"amount\": 50\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/player/real_money_transaction",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"player",
								"real_money_transaction"
							]
						}
					},
					"response": []
				},
				{
					"name": "roll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"401 Unauthorized: Token mismatch!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "bc7a1774-404b-41e1-9ba0-d1f70cb383d6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": \"9999999999\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/gacha/roll",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"roll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fde128d0-db44-45a2-bf0e-d8b7c28d525f",
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"Transaction not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0f6668d6-fcad-4dd0-8502-97456526ac65",
								"exec": [
									"const loginUrl = pm.environment.get('base_url')+\"/users/auth/login\";\r",
									"\r",
									"// Recupera le credenziali dalle variabili di ambiente\r",
									"const username = pm.environment.get(\"username\");\r",
									"const password = pm.environment.get(\"password\");\r",
									"\r",
									"const payload = {\r",
									"    username: username,\r",
									"    password: password\r",
									"};\r",
									"\r",
									"const requestOptions = {\r",
									"    url: loginUrl,\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: JSON.stringify(payload)\r",
									"};\r",
									"\r",
									"// Esegui la richiesta di login\r",
									"pm.sendRequest(requestOptions, function (err, res) {\r",
									"    if (err) {\r",
									"        console.error(\"Errore durante il login:\", err);\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    // Salva il token nelle variabili di ambiente se esiste\r",
									"    const responseJson = res.json();\r",
									"    if (responseJson.session_token) {\r",
									"        pm.environment.set(\"session_token\", responseJson.session_token);\r",
									"        console.log(\"Token salvato:\", responseJson.session_token);\r",
									"    } else {\r",
									"        console.warn(\"Login fallito: Nessun token trovato nella risposta.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e3acc30c-27ce-4ba4-bb7a-9c04332ebb92",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/transaction/get_transaction?transaction_id=9999999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"get_transaction"
							],
							"query": [
								{
									"key": "transaction_id",
									"value": "9999999999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get One Gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"Gacha item not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b35d09ba-433f-4439-ab8e-a0ef5735a053",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/get/9999999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"get",
								"9999999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Player Gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"401 Unauthorized\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6b661028-809b-4bae-bc0d-964fd7ede4a3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/get/{{user_id}}/99999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"get",
								"{{user_id}}",
								"99999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"401 Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7cdfe3ba-a65a-448e-8b88-1d6772d0ffd6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/inventory/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"inventory",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Auction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"Gacha is locked or does not exist\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "414e5da3-8f37-48d4-bf37-ac950bc1bf9a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"gacha_id\": \"noexistentgacha\",\n  \"seller_id\": \"{{user_id}}\",\n  \"base_price\": 7\n}"
						},
						"url": {
							"raw": "{{base_url}}/auction/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Auctions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"401 Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const loginUrl = \"http://127.0.0.1:8080/users/auth/login\";\r",
									"\r",
									"// Recupera le credenziali dalle variabili di ambiente\r",
									"const username = pm.environment.get(\"username\");\r",
									"const password = pm.environment.get(\"password\");\r",
									"\r",
									"const payload = {\r",
									"    username: username,\r",
									"    password: password\r",
									"};\r",
									"\r",
									"const requestOptions = {\r",
									"    url: loginUrl,\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: JSON.stringify(payload)\r",
									"};\r",
									"\r",
									"// Esegui la richiesta di login\r",
									"pm.sendRequest(requestOptions, function (err, res) {\r",
									"    if (err) {\r",
									"        console.error(\"Errore durante il login:\", err);\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    // Salva il token nelle variabili di ambiente se esiste\r",
									"    const responseJson = res.json();\r",
									"    if (responseJson.session_token) {\r",
									"        pm.environment.set(\"session_token\", responseJson.session_token);\r",
									"        console.log(\"Token salvato:\", responseJson.session_token);\r",
									"    } else {\r",
									"        console.warn(\"Login fallito: Nessun token trovato nella risposta.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "fdf89027-9211-4ce1-bb23-136a5df88171",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Gacha Auctions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d8dcfe4-f1d2-47f7-987e-63b1fbfa254e",
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"No auctions found for the gacha\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2505dce1-0e71-4dea-837c-7a1bf8487611",
								"exec": [
									"const loginUrl = pm.environment.get('base_url')+\"/users/auth/login\";\r",
									"\r",
									"// Recupera le credenziali dalle variabili di ambiente\r",
									"const username = pm.environment.get(\"username\");\r",
									"const password = pm.environment.get(\"password\");\r",
									"\r",
									"const payload = {\r",
									"    username: username,\r",
									"    password: password\r",
									"};\r",
									"\r",
									"const requestOptions = {\r",
									"    url: loginUrl,\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: JSON.stringify(payload)\r",
									"};\r",
									"\r",
									"// Esegui la richiesta di login\r",
									"pm.sendRequest(requestOptions, function (err, res) {\r",
									"    if (err) {\r",
									"        console.error(\"Errore durante il login:\", err);\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    // Salva il token nelle variabili di ambiente se esiste\r",
									"    const responseJson = res.json();\r",
									"    if (responseJson.session_token) {\r",
									"        pm.environment.set(\"session_token\", responseJson.session_token);\r",
									"        console.log(\"Token salvato:\", responseJson.session_token);\r",
									"    } else {\r",
									"        console.warn(\"Login fallito: Nessun token trovato nella risposta.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "3dc29356-aede-4024-ac2c-15a832a994ec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction/get_gacha_auctions?gacha_id=99999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"get_gacha_auctions"
							],
							"query": [
								{
									"key": "gacha_id",
									"value": "99999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Place Bid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd0fb973-697b-4853-9f69-79b3d5c6f283",
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"Auction not found or already ended\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7dda5519-993a-4269-9eaa-33bd4d31c14c",
								"exec": [
									"const loginUrl = pm.environment.get('base_url')+\"/users/auth/login\";\r",
									"\r",
									"// Recupera le credenziali dalle variabili di ambiente\r",
									"const username = pm.environment.get(\"username\");\r",
									"const password = pm.environment.get(\"password\");\r",
									"\r",
									"const payload = {\r",
									"    username: username,\r",
									"    password: password\r",
									"};\r",
									"\r",
									"const requestOptions = {\r",
									"    url: loginUrl,\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: JSON.stringify(payload)\r",
									"};\r",
									"\r",
									"// Esegui la richiesta di login\r",
									"pm.sendRequest(requestOptions, function (err, res) {\r",
									"    if (err) {\r",
									"        console.error(\"Errore durante il login:\", err);\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    // Salva il token nelle variabili di ambiente se esiste\r",
									"    const responseJson = res.json();\r",
									"    if (responseJson.session_token) {\r",
									"        pm.environment.set(\"session_token\", responseJson.session_token);\r",
									"        console.log(\"Token salvato:\", responseJson.session_token);\r",
									"    } else {\r",
									"        console.warn(\"Login fallito: Nessun token trovato nella risposta.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "8477e9a5-c74d-4777-a736-20f0882e6795",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"auction_id\": \"99999999\",\n  \"user_id\": \"1\",\n  \"bid_amount\": 13\n}"
						},
						"url": {
							"raw": "{{base_url}}/auction/bid",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"bid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Bids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"Missing auction_id parameter\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "780350cb-3f8b-4feb-9dc1-32e689238c97",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction/bids?auction_id=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"bids"
							],
							"query": [
								{
									"key": "auction_id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"401 Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "81a7147e-270f-4ecb-963d-c9d21d7fac96",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"session_token\": \"nosession\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"id": "139e6399-b97b-4465-9e04-628a01268f28"
		},
		{
			"name": "GCTA Admin Tests",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "424d8d13-1998-4c37-9a93-72a8ad439f4a",
								"exec": [
									"// Generate random username, password, and email\r",
									"const uniqueSuffix = Date.now(); // Add a timestamp for uniqueness\r",
									"const randomUsername = 'user_' + Math.random().toString(36).substring(2, 10) + '_' + uniqueSuffix; // Unique random username\r",
									"const randomPassword = Math.random().toString(36).substring(2, 12); // Random password\r",
									"const randomEmail = randomUsername + '@example.com'; // Random email based on the username\r",
									"\r",
									"// Set them as environment variables for use in the request\r",
									"pm.environment.set(\"a_username\", randomUsername);\r",
									"pm.environment.set(\"a_password\", randomPassword);\r",
									"pm.environment.set(\"a_email\", randomEmail);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8e04692b-3304-4af8-8500-04fd958b28a4",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required field - message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f58875cd-2152-4cc5-bf0e-6f0bd830d377",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{a_username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{a_password}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{a_email}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{a_base_url}}/users/admin_auth/register",
							"host": [
								"{{a_base_url}}"
							],
							"path": [
								"users",
								"admin_auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb92ab7e-6f21-48a9-b99e-305f284e533a",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields - message and session_token\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('session_token');\r",
									"\r",
									"});\r",
									"\r",
									"// Extract and save the session token\r",
									"const response = pm.response.json();\r",
									"if (response.session_token) {\r",
									"    pm.environment.set(\"a_session_token\", response.session_token);\r",
									"    console.log(\"Session token saved:\", response.session_token);\r",
									"} else {\r",
									"    console.log(\"Session token not found in the response.\");\r",
									"}\r",
									"pm.test(\"User_id is extracted and saved to an environment variable\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property('user_id');\r",
									"    pm.environment.set(\"a_user_id\", response.user_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "bd12dbbf-036c-44f9-840c-7ec6aac4bfb4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{a_username}}\",\r\n    \"password\": \"{{a_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{a_base_url}}/users/admin_auth/login",
							"host": [
								"{{a_base_url}}"
							],
							"path": [
								"users",
								"admin_auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Gacha",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9e24b1d5-61a1-4cbd-b235-804d2a5a8d96",
								"exec": [
									"// Generate random values for the gacha request\r",
									"const randomName = 'gacha_' + Math.random().toString(36).substring(2, 8); // Random name\r",
									"const rarities = [\"common\", \"rare\", \"epic\"]; // Example rarities\r",
									"const randomRarity = rarities[Math.floor(Math.random() * rarities.length)]; // Random rarity\r",
									"const statuses = [\"available\", \"unavailable\"]; // Example statuses\r",
									"const randomStatus = statuses[Math.floor(Math.random() * statuses.length)]; // Random status\r",
									"const randomDescription = \"Description_\" + Math.random().toString(36).substring(2, 15); // Random description\r",
									"\r",
									"// Set them as environment variables\r",
									"pm.environment.set(\"gacha_name\", randomName);\r",
									"pm.environment.set(\"gacha_rarity\", randomRarity);\r",
									"pm.environment.set(\"gacha_status\", randomStatus);\r",
									"pm.environment.set(\"gacha_description\", randomDescription);\r",
									"\r",
									"// Log for debugging\r",
									"console.log(\"Generated Gacha Data:\", {\r",
									"    name: randomName,\r",
									"    rarity: randomRarity,\r",
									"    status: randomStatus,\r",
									"    description: randomDescription\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "833ef9f1-ba10-434e-9fac-0cffda703042",
								"exec": [
									"// Parse the response\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Tests to validate the response\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a valid ID\", function () {\r",
									"    pm.expect(response).to.have.property(\"gacha_id\");\r",
									"\r",
									"});\r",
									"\r",
									"// Log the response for debugging\r",
									"console.log(\"Response Data:\", pm.response.json().gacha_id);\r",
									"// Stores the gacha_id in an environment or global variable\r",
									"var gachaId = pm.response.json().gacha_id;\r",
									"pm.environment.set(\"new_gacha_id\", pm.response.json().gacha_id);\r",
									"\r",
									"pm.test(\"Message contains 'Gacha item added successfully'\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.include(\"Gacha item added successfully\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1e784784-f5ce-4ccd-8ebe-78ad6f116d82",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{a_session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{gacha_name}}",
									"type": "text"
								},
								{
									"key": "rarity",
									"value": "{{gacha_rarity}}",
									"type": "text"
								},
								{
									"key": "status",
									"value": "{{gacha_status}}",
									"type": "text"
								},
								{
									"key": "description",
									"value": "{{gacha_description}}",
									"type": "text"
								},
								{
									"key": "image",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{a_base_url}}/gacha/add",
							"host": [
								"{{a_base_url}}"
							],
							"path": [
								"gacha",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c67d098-958a-4d5c-a841-159293f8aaec",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.contain(\"Gacha item updated successfully\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f134f0b0-fab1-409c-a07d-0944bbe54c9b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{a_session_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "gacha_id",
									"value": "{{new_gacha_id}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{gacha_name}}",
									"type": "text"
								},
								{
									"key": "rarity",
									"value": "common",
									"type": "text"
								},
								{
									"key": "status",
									"value": "available",
									"type": "text"
								},
								{
									"key": "description",
									"value": "updated gacha to common",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{a_base_url}}/gacha/update",
							"host": [
								"{{a_base_url}}"
							],
							"path": [
								"gacha",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "789a20ec-7fec-4633-bff3-c51b7b6b5c36",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required field 'message'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message field must be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.message).to.contain(\"Gacha item deleted successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f81f49e8-5863-4ef3-8271-0cc084417b99",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{a_session_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{a_base_url}}/gacha/delete/{{new_gacha_id}}",
							"host": [
								"{{a_base_url}}"
							],
							"path": [
								"gacha",
								"delete",
								"{{new_gacha_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "roll Gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd076d9f-a954-4e8d-84a1-249e434e9521",
								"exec": [
									"pm.test(\"Error message indicates admins cannot roll gacha\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"Admins cannot roll gacha\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a53463e2-4583-44cd-a62d-8a5b57c06d34",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{a_session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": \"{{a_user_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/gacha/roll",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"roll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5965b606-9c86-4d38-9397-b0ba62ac8dc0",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.users).to.be.an('array');\r",
									"    \r",
									"    responseData.users.forEach(function(user) {\r",
									"        pm.expect(user).to.have.property('currency_balance');\r",
									"        pm.expect(user).to.have.property('email');\r",
									"        pm.expect(user).to.have.property('session_token');\r",
									"        pm.expect(user).to.have.property('user_id');\r",
									"        pm.expect(user).to.have.property('username');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.users).to.be.an('array').and.to.have.lengthOf.at.least(1);\r",
									"    \r",
									"    responseData.users.forEach(function(user) {\r",
									"        pm.expect(user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "2ca3b5eb-c35c-460e-8a5e-a1bcdc5f2ac4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{a_session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{a_base_url}}/users/admin/get_all/PLAYER",
							"host": [
								"{{a_base_url}}"
							],
							"path": [
								"users",
								"admin",
								"get_all",
								"PLAYER"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73614840-c4a0-40aa-8f1f-8d00125ef0e8",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "635325d3-eea3-4118-9f79-432f32392481",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{a_session_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{a_base_url}}/users/admin_auth/logout",
							"host": [
								"{{a_base_url}}"
							],
							"path": [
								"users",
								"admin_auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"id": "9cba68e2-4932-4575-9580-f192f7392842",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{a_session_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "42972794-f915-49f8-a7e7-1d6f683bf96b",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e1c1329f-85aa-42bb-91ab-5ee5a91ecb21",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}