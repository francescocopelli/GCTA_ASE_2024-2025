{
	"info": {
		"_postman_id": "95c28f0c-6fe2-406d-b0c2-bcfa9663b8cf",
		"name": "GCTA Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "39567640-95c28f0c-6fe2-406d-b0c2-bcfa9663b8cf"
	},
	"item": [
		{
			"name": "GCTA E2E",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3d900d4c-b05f-4655-824c-62cce5484f1b",
								"exec": [
									"// Generate random username, password, and email\r",
									"const randomUsername = 'user_' + Math.random().toString(36).substring(2, 10); // Random username\r",
									"const randomPassword = Math.random().toString(36).substring(2, 12); // Random password\r",
									"const randomEmail = randomUsername + '@example.com'; // Random email based on the username\r",
									"\r",
									"// Set them as environment variables for use in the request\r",
									"pm.environment.set(\"username\", randomUsername);\r",
									"pm.environment.set(\"password\", randomPassword);\r",
									"pm.environment.set(\"email\", randomEmail);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "961267ca-195c-4eb2-b2fa-7a3224cd49af",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required field - message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1995944d-cbd8-43f7-bda7-73bdea4270f5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{email}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/users/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4839d92f-483d-42de-b37f-82129f35fbdf",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - message and session_token\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('session_token');\r",
									"\r",
									"});\r",
									"\r",
									"// Extract and save the session token\r",
									"const response = pm.response.json();\r",
									"if (response.session_token) {\r",
									"    pm.environment.set(\"session_token\", response.session_token);\r",
									"    console.log(\"Session token saved:\", response.session_token);\r",
									"} else {\r",
									"    console.log(\"Session token not found in the response.\");\r",
									"}\r",
									"pm.test(\"User_id is extracted and saved to an environment variable\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property('user_id');\r",
									"    pm.environment.set(\"user_id\", response.user_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2bb8644b-d986-4ad9-9dbe-df02c6652697",
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "3941fc04-91c6-44e4-b177-a9118523cfcf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Real Money Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "644aadf4-617f-4f77-a5ee-008a6559ac1b",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  console.log(responseData.message)\r",
									"  pm.expect(responseData.message).to.equal(\"Account topped up successfully\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1545aa69-58f9-4676-aacb-09b2b2f81676",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"amount\": 50\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/player/real_money_transaction",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"player",
								"real_money_transaction"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4b95395-73c4-4d42-a723-95c101a8e8b1",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required field - currency_balance\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.have.property('currency_balance');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Currency balance is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.currency_balance).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e90b3fa1-e63c-4496-b2e4-0b3c73812092",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/player/get_user_balance",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"player",
								"get_user_balance"
							]
						}
					},
					"response": []
				},
				{
					"name": "roll",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd6c6b62-fb21-4d4d-882e-4d13a86013d0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains all required fields\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"message\");\r",
									"    pm.expect(responseJson).to.have.property(\"gacha_id\");\r",
									"    pm.expect(responseJson).to.have.property(\"name\");\r",
									"    pm.expect(responseJson).to.have.property(\"rarity\");\r",
									"    pm.environment.set(\"gacha_id\", responseJson.gacha_id);\r",
									"    console.log(responseJson.gacha_id);\r",
									"});\r",
									"\r",
									"pm.test(\"Gacha rarity is valid\", function () {\r",
									"    const validRarities = [\"common\", \"rare\", \"epic\"];\r",
									"    const rarity = pm.response.json().rarity;\r",
									"    pm.expect(validRarities).to.include(rarity);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fb561d52-1386-4272-b5cd-e9dccbf389fe",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "763c7067-304b-48d9-8cbb-e024a36eb360",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/gacha/roll",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"roll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c9102f0e-142d-4b06-baf0-c8e32d76de50",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0467bfd7-8d26-4822-a916-182cac45d56c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/player/get_user",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"player",
								"get_user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ce612a87-0db7-4699-86f3-a4353ff61cd2",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function (transaction) {\r",
									"        pm.expect(transaction).to.have.property('amount');\r",
									"        pm.expect(transaction).to.have.property('transaction_date');\r",
									"        pm.expect(transaction).to.have.property('transaction_id');\r",
									"        pm.expect(transaction).to.have.property('transaction_type');\r",
									"        pm.expect(transaction).to.have.property('user_id');\r",
									"    });\r",
									"    console.log(responseData[0].transaction_id)\r",
									"    // Get the most recent transaction (last item in the array)\r",
									"    let latestTransaction = responseData[responseData.length - 1];\r",
									"    // Log the latest transaction ID\r",
									"    console.log(latestTransaction.transaction_id);\r",
									"    pm.environment.set(\"transaction_id\", latestTransaction.transaction_id);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Amount is a non-negative number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(function (transaction) {\r",
									"        pm.expect(transaction.amount).to.be.a('number').and.to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c41d76ff-61c6-4181-ba6a-b7f3a88806fb",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d7c42e26-861e-48e6-a8a7-b036f2c7529b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/transaction/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('amount');\r",
									"    pm.expect(responseData).to.have.property('transaction_date');\r",
									"    pm.expect(responseData).to.have.property('transaction_id');\r",
									"    pm.expect(responseData).to.have.property('transaction_type');\r",
									"    pm.expect(responseData).to.have.property('user_id');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Amount is a non-negative number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.amount).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "d5ea5e1b-8739-4d11-9106-6291cccb884a"
							}
						}
					],
					"id": "89813a55-b154-4006-8af0-ddec305c3a19",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/transaction/get_transaction?transaction_id={{transaction_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"get_transaction"
							],
							"query": [
								{
									"key": "transaction_id",
									"value": "{{transaction_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62618ce8-6689-41d7-a38f-75db62f0fe4c",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the response schema for required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(transaction) {\r",
									"        pm.expect(transaction).to.include.all.keys('amount', 'transaction_date', 'transaction_id', 'transaction_type', 'user_id');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d9b4b5d5-064b-41ef-921c-0cbbee8b2c9f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/transaction/get_user_transactions?user_id={{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"get_user_transactions"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get One Gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful retrieval\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains gacha item details\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"gacha_id\");\r",
									"    pm.expect(responseJson).to.have.property(\"name\");\r",
									"    pm.expect(responseJson).to.have.property(\"rarity\");\r",
									"    pm.expect(responseJson).to.have.property(\"status\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.description).to.exist;\r",
									"  pm.expect(responseData.gacha_id).to.exist;\r",
									"  pm.expect(responseData.image).to.exist;\r",
									"  pm.expect(responseData.name).to.exist;\r",
									"  pm.expect(responseData.rarity).to.exist;\r",
									"  pm.expect(responseData.status).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Gacha id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.gacha_id).to.exist;\r",
									"    pm.expect(responseData.gacha_id).to.be.a('number');\r",
									"    pm.expect(responseData.gacha_id).to.satisfy((val) => val >= 0, \"Gacha id should be non-negative\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Name should be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should be a non-empty string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Rarity should be a valid value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const validRarities = [\"common\", \"rare\", \"epic\", \"legendary\"];\r",
									"    pm.expect(responseData.rarity).to.be.oneOf(validRarities, \"Rarity should be a valid value\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "ef887280-bf98-4429-85e8-1a50c63f2f9f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "ef0b4c3e-9d61-4468-8acd-fac87af0a710"
							}
						}
					],
					"id": "9fb79020-78db-4f2b-aa4a-c3476c397d82",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/get/{{gacha_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"get",
								"{{gacha_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Gachas",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fe7b4e03-f6a5-4ec6-918e-c592a6aaa33c",
								"exec": [
									"pm.test(\"Status code is 200 for successful retrieval\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Check that gachas have the correct data\r",
									"pm.test(\"Response contains gacha items array\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"message\").that.is.an(\"array\");\r",
									"    responseJson.message.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"gacha_id\");\r",
									"        pm.expect(item).to.have.property(\"name\");\r",
									"        pm.expect(item).to.have.property(\"rarity\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"// pm.test(\"Response time is within an acceptable range\", function () {\r",
									"//   pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"// });\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200 for successful retrieval\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - description, gacha_id, name, rarity, and status\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.be.an('array');\r",
									"\r",
									"    responseData.message.forEach(function (gacha) {\r",
									"        pm.expect(gacha).to.have.property('description');\r",
									"        pm.expect(gacha).to.have.property('gacha_id');\r",
									"        //pm.expect(gacha).to.have.property('image');\r",
									"        pm.expect(gacha).to.have.property('name');\r",
									"        pm.expect(gacha).to.have.property('rarity');\r",
									"        pm.expect(gacha).to.have.property('status');\r",
									"    });\r",
									"    // console.log(responseData.message[6].gacha_id)\r",
									"    // pm.environment.set(\"gacha_id\", responseData.message[6].gacha_id);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6e8248aa-a76f-4678-9acb-33ff33113a56",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Player Gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed response time test\r",
									"pm.test(\"Status code is 200 for successful update\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.acquired_date).to.exist;\r",
									"    pm.expect(responseData.description).to.exist;\r",
									"    pm.expect(responseData.gacha_id).to.exist;\r",
									"    pm.expect(responseData.image).to.exist;\r",
									"    pm.expect(responseData.locked).to.exist;\r",
									"    pm.expect(responseData.name).to.exist;\r",
									"    pm.expect(responseData.rarity).to.exist;\r",
									"    pm.expect(responseData.status).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Locked status is a boolean value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.locked).to.be.a('boolean');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "cfe48591-43db-40df-8311-6127129b652a"
							}
						}
					],
					"id": "2644aefb-3fbf-458f-8f27-f1cdbe888bde",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/get/{{user_id}}/{{gacha_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"get",
								"{{user_id}}",
								"{{gacha_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46ea0f11-d0c1-4cbc-a8fa-65f3222265fd",
								"exec": [
									"pm.test(\"Status code is 200 for successful retrieval\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains inventory array\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"inventory\").that.is.an(\"array\");\r",
									"    responseJson.inventory.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"gacha_id\");\r",
									"        pm.expect(item).to.have.property(\"name\");\r",
									"        pm.expect(item).to.have.property(\"rarity\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200 for successful retrieval\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the structure of each item in the inventory array\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.inventory).to.be.an('array').that.is.not.empty;\r",
									"    \r",
									"    responseData.inventory.forEach(item => {\r",
									"        pm.expect(item.acquired_date).to.be.a('string');\r",
									"        pm.expect(item.description).to.be.a('string');\r",
									"        pm.expect(item.gacha_id).to.be.a('number');\r",
									"        //pm.expect(item.image).to.be.a('string');\r",
									"        pm.expect(item.locked).to.be.a('boolean');\r",
									"        pm.expect(item.name).to.be.a('string');\r",
									"        pm.expect(item.rarity).to.be.a('string');\r",
									"        pm.expect(item.status).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Ensure all items in the inventory array have the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.inventory).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    responseData.inventory.forEach(function(item) {\r",
									"        pm.expect(item.acquired_date).to.be.a('string');\r",
									"        pm.expect(item.description).to.be.a('string');\r",
									"        pm.expect(item.gacha_id).to.be.a('number');\r",
									"        //pm.expect(item.image).to.be.a('string');\r",
									"        pm.expect(item.locked).to.be.a('boolean');\r",
									"        pm.expect(item.name).to.be.a('string');\r",
									"        pm.expect(item.rarity).to.be.a('string');\r",
									"        pm.expect(item.status).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "590f03dd-cef9-48cf-a93b-9387e1b98768",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ac283a87-1b9c-40f1-aba4-e497e074eb53",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/inventory/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"inventory",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "My Gacha List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e41fa90-37e3-4d96-a55d-472ad17c7978",
								"exec": [
									"pm.test(\"Status code is 200 for successful retrieval\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains inventory array\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"inventory\").that.is.an(\"array\");\r",
									"    responseJson.inventory.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"gacha_id\");\r",
									"        pm.expect(item).to.have.property(\"name\");\r",
									"        pm.expect(item).to.have.property(\"rarity\");\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200 for successful retrieval\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the structure of each item in the inventory array\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.inventory).to.be.an('array').that.is.not.empty;\r",
									"    \r",
									"    responseData.inventory.forEach(item => {\r",
									"        pm.expect(item.acquired_date).to.be.a('string');\r",
									"        pm.expect(item.description).to.be.a('string');\r",
									"        pm.expect(item.gacha_id).to.be.a('number');\r",
									"        //pm.expect(item.image).to.be.a('string');\r",
									"        pm.expect(item.locked).to.be.a('boolean');\r",
									"        pm.expect(item.name).to.be.a('string');\r",
									"        pm.expect(item.rarity).to.be.a('string');\r",
									"        pm.expect(item.status).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Ensure all items in the inventory array have the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.inventory).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    responseData.inventory.forEach(function(item) {\r",
									"        pm.expect(item.acquired_date).to.be.a('string');\r",
									"        pm.expect(item.description).to.be.a('string');\r",
									"        pm.expect(item.gacha_id).to.be.a('number');\r",
									"        //pm.expect(item.image).to.be.a('string');\r",
									"        pm.expect(item.locked).to.be.a('boolean');\r",
									"        pm.expect(item.name).to.be.a('string');\r",
									"        pm.expect(item.rarity).to.be.a('string');\r",
									"        pm.expect(item.status).to.be.a('string');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "afaa07b0-3505-430f-9fce-2d7cda6579ac",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/player/my_gacha_list",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"player",
								"my_gacha_list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Auction",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca592886-dae3-4a95-8df2-02cb928da340",
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response schema matches the expected schema\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property('auction_id');\r",
									"    if (responseData.auction_id){\r",
									"        pm.environment.set(\"auction_id\",responseData.auction_id);\r",
									"        console.log(\"setting auction_id: \"+responseData.auction_id);\r",
									"    }\r",
									"    else\r",
									"        console.log(\"auction_id not found\");\r",
									"\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "741a1688-b5a7-4231-a47f-97e690cc4262",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"gacha_id\": \"{{gacha_id}}\",\n  \"base_price\": 7\n}"
						},
						"url": {
							"raw": "{{base_url}}/auction/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Active Auctions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e3dbad8-89bc-42ad-98a2-74f7e5787533",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.auctions).to.be.an('array');\r",
									"    responseData.auctions.forEach(function (auction) {\r",
									"        pm.expect(auction.auction_id).to.exist;\r",
									"        pm.expect(auction.base_price).to.exist;\r",
									"        // pm.expect(auction.buyer_id).to.exist;\r",
									"        pm.expect(auction.end_time).to.exist;\r",
									"        pm.expect(auction.gacha_id).to.exist;\r",
									"        pm.expect(auction.highest_bid).to.exist;\r",
									"        pm.expect(auction.seller_id).to.exist;\r",
									"        pm.expect(auction.status).to.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Save the auction_id of the last auction\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const lastAuction = responseData.auctions[responseData.auctions.length - 1];\r",
									"    pm.environment.set(\"last_auction_id\", lastAuction.auction_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "26e2c7dc-afa4-4783-9275-a8cce05fa1a8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction/all_active",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"all_active"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Gacha Auctions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function (auction) {\r",
									"        pm.expect(auction.auction_id).to.exist;\r",
									"        pm.expect(auction.base_price).to.exist;\r",
									"        pm.expect(auction).to.have.property('buyer_id');\r",
									"        pm.expect(auction.buyer_id).to.be.oneOf([null, auction.buyer_id]);\r",
									"        pm.expect(auction.end_time).to.exist;\r",
									"        pm.expect(auction.gacha_id).to.exist;\r",
									"        pm.expect(auction.highest_bid).to.exist;\r",
									"        pm.expect(auction.seller_id).to.exist;\r",
									"        pm.expect(auction.status).to.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Auction_id is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(function (auction) {\r",
									"        pm.expect(auction.auction_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Auction_id should not be empty\");\r",
									"\r",
									"        console.log(responseData[0].auction_id)\r",
									"        pm.environment.set(\"auction_id\", responseData[0].auction_id)\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Highest_bid is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(function (auction) {\r",
									"        pm.expect(auction.highest_bid).to.be.a('number');\r",
									"        pm.expect(auction.highest_bid).to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the schema of the response body\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function (item) {\r",
									"        pm.expect(item).to.be.an('object');\r",
									"        pm.expect(item.auction_id).to.be.a('string');\r",
									"        pm.expect(item.base_price).to.satisfy(value => typeof value === 'number' || value === null, 'base_price should be a number or null');\r",
									"        pm.expect(item).to.have.property('buyer_id');\r",
									"        pm.expect(item.buyer_id).to.be.oneOf([null, item.buyer_id]);\r",
									"        pm.expect(item.end_time).to.be.a('string');\r",
									"        pm.expect(item.gacha_id).to.be.a('number');\r",
									"        pm.expect(item).to.have.property('highest_bid');\r",
									"        pm.expect(item.highest_bid).to.be.oneOf([null, item.highest_bid]);\r",
									"        pm.expect(item.seller_id).to.be.a('number');\r",
									"        pm.expect(item.status).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "c6590d94-7672-43c0-931a-d9fa2b963472"
							}
						}
					],
					"id": "f44c76e8-0b6a-46cf-897f-e6807a653813",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction//get_gacha_auctions?gacha_id={{gacha_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"",
								"get_gacha_auctions"
							],
							"query": [
								{
									"key": "gacha_id",
									"value": "{{gacha_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "04d28528-1086-40bf-aa8f-633ff4e32ba2",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e81a0c88-6af2-47aa-acc3-7c9b62961175",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/users/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register User to bid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3d900d4c-b05f-4655-824c-62cce5484f1b",
								"exec": [
									"// Generate random username, password, and email\r",
									"const randomUsername = 'user_' + Math.random().toString(36).substring(2, 10); // Random username\r",
									"const randomPassword = Math.random().toString(36).substring(2, 12); // Random password\r",
									"const randomEmail = randomUsername + '@example.com'; // Random email based on the username\r",
									"\r",
									"// Set them as environment variables for use in the request\r",
									"pm.environment.set(\"username\", randomUsername);\r",
									"pm.environment.set(\"password\", randomPassword);\r",
									"pm.environment.set(\"email\", randomEmail);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "961267ca-195c-4eb2-b2fa-7a3224cd49af",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "3a9a47d4-4b73-4767-a513-cc9d2f80b5b2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{email}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/users/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User to bid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4839d92f-483d-42de-b37f-82129f35fbdf",
								"exec": [
									"\r",
									"// Extract and save the session token\r",
									"const response = pm.response.json();\r",
									"if (response.session_token) {\r",
									"    pm.environment.set(\"session_token\", response.session_token);\r",
									"    console.log(\"Session token saved:\", response.session_token);\r",
									"} else {\r",
									"    console.log(\"Session token not found in the response.\");\r",
									"}\r",
									"pm.test(\"User_id is extracted and saved to an environment variable\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property('user_id');\r",
									"    pm.environment.set(\"user_id\", response.user_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2bb8644b-d986-4ad9-9dbe-df02c6652697",
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b522affb-72f2-40bb-8f3a-2bef160f75ee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Real Money Transaction to bid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "644aadf4-617f-4f77-a5ee-008a6559ac1b",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b1df49dd-0629-4efd-9679-bc8a40bec6a4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": \"{{user_id}}\",\n  \"amount\": 50\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/player/real_money_transaction",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"player",
								"real_money_transaction"
							]
						}
					},
					"response": []
				},
				{
					"name": "Place Bid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "336001c4-32b5-4518-ad14-0b0e06771745",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response schema matches the expected schema\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    console.log(\"received response: \"+JSON.stringify(responseData,null,2));\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message field is present in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9cd635f2-a1f4-4269-bb63-9b3800bdc4e8",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0eddcc54-5af3-4d8a-9690-b80c07b80197",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"auction_id\": \"{{auction_id}}\",\n  \"bid_amount\": 13\n}"
						},
						"url": {
							"raw": "{{base_url}}/auction/bid",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"bid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Bids",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8a33153-91e5-4cd6-910a-6ceff6b3234e",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.bids).to.be.an('array');\r",
									"    \r",
									"    responseData.bids.forEach(function(bid) {\r",
									"        pm.expect(bid.auction_id).to.exist;\r",
									"        pm.expect(bid.bid_amount).to.exist;\r",
									"        pm.expect(bid.bid_id).to.exist;\r",
									"        pm.expect(bid.bid_time).to.exist;\r",
									"        pm.expect(bid.user_id).to.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Bids array is present and contains expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.bids).to.exist.and.to.be.an('array');\r",
									"    pm.expect(responseData.bids.length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Bids data properties validation\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.bids).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    responseData.bids.forEach(function(bid) {\r",
									"        pm.expect(bid.auction_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Auction ID should be a non-empty string\");\r",
									"        pm.expect(bid.bid_amount).to.be.a('number').and.to.be.at.least(0, \"Bid amount should be a non-negative integer\");\r",
									"        pm.expect(bid.bid_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Bid ID should be a non-empty string\");\r",
									"        pm.expect(bid.user_id).to.be.a('number').and.to.be.at.least(0, \"User ID should be a non-negative integer\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "4fb41375-2f1f-46f3-a7e4-16ad9a1d727d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction//bids?auction_id={{last_auction_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"",
								"bids"
							],
							"query": [
								{
									"key": "auction_id",
									"value": "{{last_auction_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Player",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b27dfb16-c213-4668-9144-7b5418e3698a",
								"exec": [
									"// Retrieve the original email from the environment\r",
									"const originalEmail = pm.environment.get(\"email\");\r",
									"\r",
									"// Ensure the email is only updated once\r",
									"if (originalEmail) {\r",
									"    // Check if the email already starts with \"updated_\"\r",
									"    if (!originalEmail.startsWith(\"updated_\")) {\r",
									"        // Add \"updated_\" in front of the original email\r",
									"        const updatedEmail = `updated_${originalEmail}`;\r",
									"        \r",
									"        // Save the updated email back to the environment\r",
									"        pm.environment.set(\"updated_email\", updatedEmail);\r",
									"        console.log(\"Updated email saved:\", updatedEmail);\r",
									"    } else {\r",
									"        console.log(\"Email is already updated:\", originalEmail);\r",
									"    }\r",
									"} else {\r",
									"    console.log(\"Original email not found in the environment.\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "eff3627f-15f0-4e8a-a29c-194db0b16d76",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "201f8e98-1a62-498e-91f1-9cba0ff64833",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{updated_email}}",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"value": null
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/player/update",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"player",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout to bid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "04d28528-1086-40bf-aa8f-633ff4e32ba2",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e9b21829-46f9-4f59-b9d9-8d0348e714c3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/users/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"id": "be595483-f839-4b7e-b8e1-fb4280ebac19",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/auth/delete",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"delete"
							]
						}
					},
					"response": []
				}
			],
			"id": "e65c8a6e-541c-42f4-a246-efee388eda11"
		},
		{
			"name": "GCTA Negative Tests",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "95375be0-eae9-4684-af8c-302a5b7f9ae3"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400 for invalid input\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400); // Adjust expected code based on API behavior\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is provided\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.exist;\r",
									"    pm.expect(response.error).to.include(\"Invalid email address\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "ba39f1aa-af29-4c9a-8b62-dbdd46e98098"
							}
						}
					],
					"id": "898174ca-437b-4ee3-a287-59ebb77bb535",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "invalidemail",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/users/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "75dfb32c-ec39-4c1d-9f3e-a553b87f01f6",
								"exec": [
									"pm.test(\"Response status code is 401 for incorrect credentials\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"Invalid credentials\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5cc4d1cc-e117-4cbe-8755-6e4c8e1b676c",
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6b522a7b-0026-4f25-baf0-076fe8570fee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"nonexistentuser\",\n    \"password\": \"somepassword\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Real Money Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51b21b0f-5986-46c8-b3e2-30261eb8982e",
								"exec": [
									"pm.test(\"Authentication Token is missing!\", function () {\r",
									"    const response = pm.response.text();\r",
									"    pm.expect(response).to.include(\"401\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6e3280cc-7aba-492a-90bb-aa3b74800dd0",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b7a3b2df-c74f-46f6-b7a4-158b6da942c1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"amount\": 50\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/player/real_money_transaction",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"player",
								"real_money_transaction"
							]
						}
					},
					"response": []
				},
				{
					"name": "roll",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a969f00d-620a-4278-8777-a472ccc06459",
								"exec": [
									"pm.test(\"Authentication Token is missing!\", function () {\r",
									"    const response = pm.response.text();\r",
									"    pm.expect(response).to.include(\"401\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a4ff770e-961a-48f5-ac50-7a75202b6aa5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/roll",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"roll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d8fb4cca-852f-4f3f-a09a-86e1033a6dc7",
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"Transaction not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b666fcda-4a91-40f2-b1af-6e3d9671783f",
								"exec": [
									"const loginUrl = pm.environment.get('base_url')+\"/users/auth/login\";\r",
									"\r",
									"// Recupera le credenziali dalle variabili di ambiente\r",
									"const username = pm.environment.get(\"username\");\r",
									"const password = pm.environment.get(\"password\");\r",
									"\r",
									"const payload = {\r",
									"    username: username,\r",
									"    password: password\r",
									"};\r",
									"\r",
									"const requestOptions = {\r",
									"    url: loginUrl,\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: JSON.stringify(payload)\r",
									"};\r",
									"\r",
									"// Esegui la richiesta di login\r",
									"pm.sendRequest(requestOptions, function (err, res) {\r",
									"    if (err) {\r",
									"        console.error(\"Errore durante il login:\", err);\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    // Salva il token nelle variabili di ambiente se esiste\r",
									"    const responseJson = res.json();\r",
									"    if (responseJson.session_token) {\r",
									"        pm.environment.set(\"session_token\", responseJson.session_token);\r",
									"        console.log(\"Token salvato:\", responseJson.session_token);\r",
									"    } else {\r",
									"        console.warn(\"Login fallito: Nessun token trovato nella risposta.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e2fa2cd8-89a7-4b64-bd11-9dcca33c0c8b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/transaction/get_transaction?transaction_id=9999999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"get_transaction"
							],
							"query": [
								{
									"key": "transaction_id",
									"value": "9999999999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get One Gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"Gacha item not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "9c02081d-9a81-4f53-accd-daf4e4dee7f4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "8966f6fe-63ef-4ebb-b5c4-e2a150bb0924"
							}
						}
					],
					"id": "215d673c-ddad-4adc-a127-9ceeaff1db80",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/get/9999999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"get",
								"9999999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Player Gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"401 Unauthorized\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "fc2f0a4b-065e-4392-8b64-62127fa083dc"
							}
						}
					],
					"id": "2b7edec8-2d27-4d5b-8964-153ef6cf0c19",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/get/{{user_id}}/99999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"get",
								"{{user_id}}",
								"99999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"401 Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "d15d5c1b-0e89-42df-b164-0df20a6257f1"
							}
						}
					],
					"id": "3fa2b0fc-bec4-47fb-af98-f5ccc7d461ab",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/inventory/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"inventory",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Auction",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "726a0840-913a-4269-8ba5-fdec4cb6371d",
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"Gacha is locked or does not exist\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "55f90853-501e-44ba-8d30-f57c7cd9a09d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"gacha_id\": \"noexistentgacha\",\n  \"base_price\": 7\n}"
						},
						"url": {
							"raw": "{{base_url}}/auction/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Auctions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"401 Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "9804d89e-f53f-4c6d-b746-0723e04a43d9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const loginUrl = \"http://127.0.0.1:8080/users/auth/login\";\r",
									"\r",
									"// Recupera le credenziali dalle variabili di ambiente\r",
									"const username = pm.environment.get(\"username\");\r",
									"const password = pm.environment.get(\"password\");\r",
									"\r",
									"const payload = {\r",
									"    username: username,\r",
									"    password: password\r",
									"};\r",
									"\r",
									"const requestOptions = {\r",
									"    url: loginUrl,\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: JSON.stringify(payload)\r",
									"};\r",
									"\r",
									"// Esegui la richiesta di login\r",
									"pm.sendRequest(requestOptions, function (err, res) {\r",
									"    if (err) {\r",
									"        console.error(\"Errore durante il login:\", err);\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    // Salva il token nelle variabili di ambiente se esiste\r",
									"    const responseJson = res.json();\r",
									"    if (responseJson.session_token) {\r",
									"        pm.environment.set(\"session_token\", responseJson.session_token);\r",
									"        console.log(\"Token salvato:\", responseJson.session_token);\r",
									"    } else {\r",
									"        console.warn(\"Login fallito: Nessun token trovato nella risposta.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "22b95c47-01aa-438c-b051-0db01f063390"
							}
						}
					],
					"id": "6691a03d-f7e8-455e-8fc2-2940225604c5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Gacha Auctions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17fd9e90-3ecb-4976-a226-4a8f647e2694",
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"No auctions found for the gacha\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "964ae523-e633-4f3d-bb56-5d3ee5403126",
								"exec": [
									"const loginUrl = pm.environment.get('base_url')+\"/users/auth/login\";\r",
									"\r",
									"// Recupera le credenziali dalle variabili di ambiente\r",
									"const username = pm.environment.get(\"username\");\r",
									"const password = pm.environment.get(\"password\");\r",
									"\r",
									"const payload = {\r",
									"    username: username,\r",
									"    password: password\r",
									"};\r",
									"\r",
									"const requestOptions = {\r",
									"    url: loginUrl,\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: JSON.stringify(payload)\r",
									"};\r",
									"\r",
									"// Esegui la richiesta di login\r",
									"pm.sendRequest(requestOptions, function (err, res) {\r",
									"    if (err) {\r",
									"        console.error(\"Errore durante il login:\", err);\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    // Salva il token nelle variabili di ambiente se esiste\r",
									"    const responseJson = res.json();\r",
									"    if (responseJson.session_token) {\r",
									"        pm.environment.set(\"session_token\", responseJson.session_token);\r",
									"        console.log(\"Token salvato:\", responseJson.session_token);\r",
									"    } else {\r",
									"        console.warn(\"Login fallito: Nessun token trovato nella risposta.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9ffab94f-88ea-4947-8e71-3a7a53075294",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction/get_gacha_auctions?gacha_id=99999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"get_gacha_auctions"
							],
							"query": [
								{
									"key": "gacha_id",
									"value": "99999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Place Bid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecaf24ab-445e-4f09-91c1-644d3faf2241",
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"Auction not found or already ended\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "937b147f-b7c4-4199-a170-2538686b00c9",
								"exec": [
									"const loginUrl = pm.environment.get('base_url')+\"/users/auth/login\";\r",
									"\r",
									"// Recupera le credenziali dalle variabili di ambiente\r",
									"const username = pm.environment.get(\"username\");\r",
									"const password = pm.environment.get(\"password\");\r",
									"\r",
									"const payload = {\r",
									"    username: username,\r",
									"    password: password\r",
									"};\r",
									"\r",
									"const requestOptions = {\r",
									"    url: loginUrl,\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: JSON.stringify(payload)\r",
									"};\r",
									"\r",
									"// Esegui la richiesta di login\r",
									"pm.sendRequest(requestOptions, function (err, res) {\r",
									"    if (err) {\r",
									"        console.error(\"Errore durante il login:\", err);\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    // Salva il token nelle variabili di ambiente se esiste\r",
									"    const responseJson = res.json();\r",
									"    if (responseJson.session_token) {\r",
									"        pm.environment.set(\"session_token\", responseJson.session_token);\r",
									"        console.log(\"Token salvato:\", responseJson.session_token);\r",
									"    } else {\r",
									"        console.warn(\"Login fallito: Nessun token trovato nella risposta.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "2ad5a7ca-e1b1-4bfd-944d-77f5ede9d3a0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"auction_id\": \"99999999\",\n  \"bid_amount\": 13\n}"
						},
						"url": {
							"raw": "{{base_url}}/auction/bid",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"bid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Bids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"Missing auction_id parameter\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "e13d5ba2-a0d8-42c9-83d0-b0989dbf7006"
							}
						}
					],
					"id": "c0be3ca0-a7c4-408f-a08b-72079224da15",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction/bids?auction_id=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"bids"
							],
							"query": [
								{
									"key": "auction_id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2731d71-8142-44c5-84b9-d6774fab1fc4",
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"401 Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e2917913-a099-4f74-9b92-3d8aad6b5fd5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/users/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"id": "4c9afe13-e8ee-4280-9c8a-9ab4e28c70c9"
		},
		{
			"name": "GCTA Admin Tests",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8480a147-0a96-4bf9-87e8-8645a9032a5b",
								"exec": [
									"// Generate random username, password, and email\r",
									"const uniqueSuffix = Date.now(); // Add a timestamp for uniqueness\r",
									"const randomUsername = 'user_' + Math.random().toString(36).substring(2, 10) + '_' + uniqueSuffix; // Unique random username\r",
									"const randomPassword = Math.random().toString(36).substring(2, 12); // Random password\r",
									"const randomEmail = randomUsername + '@example.com'; // Random email based on the username\r",
									"\r",
									"// Set them as environment variables for use in the request\r",
									"pm.environment.set(\"a_username\", randomUsername);\r",
									"pm.environment.set(\"a_password\", randomPassword);\r",
									"pm.environment.set(\"a_email\", randomEmail);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b0323bb1-1eec-4736-b985-3b67f8820c14",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required field - message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "269ecf36-c26e-4d30-8f81-6128975dad4d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{a_username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{a_password}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{a_email}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{a_base_url}}/users/admin_auth/register",
							"host": [
								"{{a_base_url}}"
							],
							"path": [
								"users",
								"admin_auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5627e7f3-8c2c-4755-9c5b-63c3f5ac9a36",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - message and session_token\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('session_token');\r",
									"\r",
									"});\r",
									"\r",
									"// Extract and save the session token\r",
									"const response = pm.response.json();\r",
									"if (response.session_token) {\r",
									"    pm.environment.set(\"a_session_token\", response.session_token);\r",
									"    console.log(\"Session token saved:\", response.session_token);\r",
									"} else {\r",
									"    console.log(\"Session token not found in the response.\");\r",
									"}\r",
									"pm.test(\"User_id is extracted and saved to an environment variable\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property('user_id');\r",
									"    pm.environment.set(\"a_user_id\", response.user_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "475325c3-65d4-44dd-ab75-8df00b6a4c14",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{a_username}}\",\r\n    \"password\": \"{{a_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{a_base_url}}/users/admin_auth/login",
							"host": [
								"{{a_base_url}}"
							],
							"path": [
								"users",
								"admin_auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Auction",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9e8993e-27d8-49ff-991f-537dae6d9983",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.contain(\"Auction updated successfully\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0bb78581-8080-4423-a044-278b5a090393",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"base_price\":10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{a_base_url}}/auction/update?auction_id={{auction_id}}",
							"host": [
								"{{a_base_url}}"
							],
							"path": [
								"auction",
								"update"
							],
							"query": [
								{
									"key": "auction_id",
									"value": "{{auction_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Gacha",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bb48ea10-6f1e-4d7e-8e71-bb2d43aa3696",
								"exec": [
									"// Generate random values for the gacha request\r",
									"const randomName = 'gacha_' + Math.random().toString(36).substring(2, 8); // Random name\r",
									"const rarities = [\"common\", \"rare\", \"epic\"]; // Example rarities\r",
									"const randomRarity = rarities[Math.floor(Math.random() * rarities.length)]; // Random rarity\r",
									"const statuses = [\"available\", \"out_of_stock\"] // Example statuses\r",
									"const randomStatus = statuses[Math.floor(Math.random() * statuses.length)]; // Random status\r",
									"const randomDescription = \"Description_\" + Math.random().toString(36).substring(2, 15); // Random description\r",
									"\r",
									"// Set them as environment variables\r",
									"pm.environment.set(\"gacha_name\", randomName);\r",
									"pm.environment.set(\"gacha_rarity\", randomRarity);\r",
									"pm.environment.set(\"gacha_status\", randomStatus);\r",
									"pm.environment.set(\"gacha_description\", randomDescription);\r",
									"\r",
									"// Log for debugging\r",
									"console.log(\"Generated Gacha Data:\", {\r",
									"    name: randomName,\r",
									"    rarity: randomRarity,\r",
									"    status: randomStatus,\r",
									"    description: randomDescription\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6b688f5c-7a24-4795-8dbd-1ebc23c7b722",
								"exec": [
									"// Parse the response\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Tests to validate the response\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a valid ID\", function () {\r",
									"    pm.expect(response).to.have.property(\"gacha_id\");\r",
									"\r",
									"});\r",
									"\r",
									"// Log the response for debugging\r",
									"console.log(\"Response Data:\", pm.response.json().gacha_id);\r",
									"// Stores the gacha_id in an environment or global variable\r",
									"var gachaId = pm.response.json().gacha_id;\r",
									"pm.environment.set(\"new_gacha_id\", pm.response.json().gacha_id);\r",
									"\r",
									"pm.test(\"Message contains 'Gacha item added successfully'\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.include(\"Gacha item added successfully\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b622b487-4a0f-4b30-9751-56be627abbaf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{a_session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{gacha_name}}",
									"type": "text"
								},
								{
									"key": "rarity",
									"value": "{{gacha_rarity}}",
									"type": "text"
								},
								{
									"key": "status",
									"value": "{{gacha_status}}",
									"type": "text"
								},
								{
									"key": "description",
									"value": "{{gacha_description}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{a_base_url}}/gacha/add",
							"host": [
								"{{a_base_url}}"
							],
							"path": [
								"gacha",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69d09399-1218-4cd9-baa0-af0dc47303dd",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.contain(\"Gacha item updated successfully\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b683dfc2-24d7-431b-a42c-d82f77fef5e1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{a_session_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "gacha_id",
									"value": "{{new_gacha_id}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{gacha_name}}",
									"type": "text"
								},
								{
									"key": "rarity",
									"value": "common",
									"type": "text"
								},
								{
									"key": "status",
									"value": "available",
									"type": "text"
								},
								{
									"key": "description",
									"value": "updated gacha to common",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{a_base_url}}/gacha/update",
							"host": [
								"{{a_base_url}}"
							],
							"path": [
								"gacha",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74aa7294-3e4f-4cd5-9c33-1e1c346e9ba9",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required field 'message'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message field must be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.message).to.contain(\"Gacha item deleted successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "8180dbfb-0456-45a9-8b5a-0e6dc677283b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{a_session_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{a_base_url}}/gacha/delete/{{new_gacha_id}}",
							"host": [
								"{{a_base_url}}"
							],
							"path": [
								"gacha",
								"delete",
								"{{new_gacha_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "roll Gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8affffb-4677-4638-a0e3-b2194bcb9dc9",
								"exec": [
									"pm.test(\"Error message indicates admins cannot roll gacha\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"Admins cannot roll gacha\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c33940df-8275-4168-ad49-9c48fbc67b2e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{a_session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/gacha/roll",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"roll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af4fb7a3-6014-4afe-b910-e89c621aa2e0",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.users).to.be.an('array');\r",
									"    \r",
									"    responseData.users.forEach(function(user) {\r",
									"        pm.expect(user).to.have.property('currency_balance');\r",
									"        pm.expect(user).to.have.property('email');\r",
									"        pm.expect(user).to.have.property('session_token');\r",
									"        pm.expect(user).to.have.property('user_id');\r",
									"        pm.expect(user).to.have.property('username');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.users).to.be.an('array').and.to.have.lengthOf.at.least(1);\r",
									"    \r",
									"    responseData.users.forEach(function(user) {\r",
									"        pm.expect(user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7dbeda0a-9420-4373-8d0a-3e18e76663ec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{a_session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{a_base_url}}/users/admin/get_all/PLAYER",
							"host": [
								"{{a_base_url}}"
							],
							"path": [
								"users",
								"admin",
								"get_all",
								"PLAYER"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cbb3a9e4-06fb-43dd-8f1a-0d5bf52df9a5",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "75051019-326a-4442-9bfc-808bc2e9f119",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{a_session_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{a_base_url}}/users/admin_auth/logout",
							"host": [
								"{{a_base_url}}"
							],
							"path": [
								"users",
								"admin_auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"id": "14f2d41d-53c5-4878-8af5-46475242ee1e",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{a_session_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2003c139-5683-4fe8-9bd6-dc63f9adbc93",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e8b9aac3-ace3-43aa-8b46-e62563d2610c",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}