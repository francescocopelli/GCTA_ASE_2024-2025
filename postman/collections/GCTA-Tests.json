{
	"info": {
		"_postman_id": "0a625751-634c-4121-929d-6342934aeb68",
		"name": "GCTA-Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "39671610-0a625751-634c-4121-929d-6342934aeb68"
	},
	"item": [
		{
			"name": "GCTA E2E",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8b9ea0b-36d2-45ce-9013-a87822593b8d",
								"exec": [
									"// Generate random username, password, and email\r",
									"const randomUsername = 'user_' + Math.random().toString(36).substring(2, 10); // Random username\r",
									"const randomPassword = Math.random().toString(36).substring(2, 12); // Random password\r",
									"const randomEmail = randomUsername + '@example.com'; // Random email based on the username\r",
									"\r",
									"// Set them as environment variables for use in the request\r",
									"pm.environment.set(\"username\", randomUsername);\r",
									"pm.environment.set(\"password\", randomPassword);\r",
									"pm.environment.set(\"email\", randomEmail);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f26df958-8376-47b1-85c2-7eced333ce34",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required field - message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ae313cf0-6dc6-4175-9122-56cc2413a656",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{email}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://127.0.0.1:8080/users/auth/register",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"users",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4234035f-0f65-47ea-bd79-795ef3952935",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields - message and session_token\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('session_token');\r",
									"\r",
									"});\r",
									"\r",
									"// Extract and save the session token\r",
									"const response = pm.response.json();\r",
									"if (response.session_token) {\r",
									"    pm.environment.set(\"session_token\", response.session_token);\r",
									"    console.log(\"Session token saved:\", response.session_token);\r",
									"} else {\r",
									"    console.log(\"Session token not found in the response.\");\r",
									"}\r",
									"pm.test(\"User_id is extracted and saved to an environment variable\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property('user_id');\r",
									"    pm.environment.set(\"user_id\", response.user_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dbb836fb-8902-4e3f-b169-1c2233e242e7",
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ebb8a011-cb89-477c-8bba-5b022ae7de92",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "http://127.0.0.1:8080/users/auth/login",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"users",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body should have the correct schema\", function () {\r",
									"  const responseData = pm.response.text();\r",
									"  pm.expect(responseData).to.include('Internal Server Error');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "fdb82568-5b3a-434b-85f2-5b43ffbd29b9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Retrieve the original email from the environment\r",
									"const originalEmail = pm.environment.get(\"email\");\r",
									"\r",
									"if (originalEmail) {\r",
									"    // Add \"updated\" in front of the original email\r",
									"    const updatedEmail = `updated_${originalEmail}`;\r",
									"    \r",
									"    // Save the updated email back to the environment\r",
									"    pm.environment.set(\"email\", updatedEmail);\r",
									"    console.log(\"Updated email saved:\", updatedEmail);\r",
									"} else {\r",
									"    console.log(\"Original email not found in the environment.\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "13e63321-9644-435d-8af1-0f231a8ffe72"
							}
						}
					],
					"id": "db7d65ac-a6c7-4aa9-8a0b-d56eb59543c3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\",\n  \"email\": \"{{email@email.com}}\",\n  \"image\": \"\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/auth/update",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Real Money Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  console.log(responseData.message)\r",
									"  pm.expect(responseData.message).to.equal(\"Transaction added successfully\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "9f5cdb4f-b8a7-4bc2-99de-3785d3d06cc0"
							}
						}
					],
					"id": "2239e919-3898-4564-a1e4-1e69fa950ad0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": \"{{user_id}}\",\n  \"amount\": 50\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/player/real_money_transaction",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"player",
								"real_money_transaction"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required field - currency_balance\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.have.property('currency_balance');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Currency balance is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.currency_balance).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "9db17464-e1f7-42d0-ab2a-3ebd483b18b3"
							}
						}
					],
					"id": "afd22ac1-685d-4f41-9e50-7199ec459f22",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/player/get_user_balance/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"player",
								"get_user_balance",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "roll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains all required fields\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"message\");\r",
									"    pm.expect(responseJson).to.have.property(\"gacha_id\");\r",
									"    pm.expect(responseJson).to.have.property(\"name\");\r",
									"    pm.expect(responseJson).to.have.property(\"rarity\");\r",
									"});\r",
									"\r",
									"pm.test(\"Gacha rarity is valid\", function () {\r",
									"    const validRarities = [\"common\", \"rare\", \"epic\", \"legendary\"];\r",
									"    const rarity = pm.response.json().rarity;\r",
									"    pm.expect(validRarities).to.include(rarity);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains all required fields\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"message\");\r",
									"    pm.expect(responseJson).to.have.property(\"gacha_id\");\r",
									"    pm.expect(responseJson).to.have.property(\"name\");\r",
									"    pm.expect(responseJson).to.have.property(\"rarity\");\r",
									"\r",
									"    pm.environment.set(\"gacha_id\", responseJson.gacha_id);\r",
									"    console.log(responseJson.gacha_id);\r",
									"});\r",
									"\r",
									"pm.test(\"Gacha rarity is valid\", function () {\r",
									"    const validRarities = [\"common\", \"rare\", \"epic\", \"legendary\"];\r",
									"    const rarity = pm.response.json().rarity;\r",
									"    pm.expect(validRarities).to.include(rarity);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "d9aa5d8f-f728-451e-b9b9-4a0c2fe8693a"
							}
						}
					],
					"id": "84c451d6-7eca-4f06-8739-717aee018c5e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": \"{{user_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/gacha/roll",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"roll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function (transaction) {\r",
									"        pm.expect(transaction).to.have.property('amount');\r",
									"        pm.expect(transaction).to.have.property('transaction_date');\r",
									"        pm.expect(transaction).to.have.property('transaction_id');\r",
									"        pm.expect(transaction).to.have.property('transaction_type');\r",
									"        pm.expect(transaction).to.have.property('user_id');\r",
									"    });\r",
									"    console.log(responseData[0].transaction_id)\r",
									"    // Get the most recent transaction (last item in the array)\r",
									"    let latestTransaction = responseData[responseData.length - 1];\r",
									"    // Log the latest transaction ID\r",
									"    console.log(latestTransaction.transaction_id);\r",
									"    pm.environment.set(\"transaction_id\", latestTransaction.transaction_id);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Amount is a non-negative number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(function (transaction) {\r",
									"        pm.expect(transaction.amount).to.be.a('number').and.to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "cc79c80c-1ddd-490d-b0ce-dacae86bd48c"
							}
						}
					],
					"id": "328bb172-c90e-4de6-bba2-55b39f06bae1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/transaction/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('amount');\r",
									"    pm.expect(responseData).to.have.property('transaction_date');\r",
									"    pm.expect(responseData).to.have.property('transaction_id');\r",
									"    pm.expect(responseData).to.have.property('transaction_type');\r",
									"    pm.expect(responseData).to.have.property('user_id');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Amount is a non-negative number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.amount).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "79da0b81-8c5d-4f6f-a386-04d1705eab84"
							}
						}
					],
					"id": "69daad17-88f5-4c49-b07d-7fbc648cdb9a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/transaction/get_transaction?transaction_id={{transaction_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"get_transaction"
							],
							"query": [
								{
									"key": "transaction_id",
									"value": "{{transaction_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the response schema for required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(transaction) {\r",
									"        pm.expect(transaction).to.include.all.keys('amount', 'transaction_date', 'transaction_id', 'transaction_type', 'user_id');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "5b864be3-f563-4835-95a1-6e921ab296dd"
							}
						}
					],
					"id": "2e30f3d3-9c0f-4fb5-bc86-4455b83c71ea",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/transaction/get_user_transactions?user_id={{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"get_user_transactions"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get One Gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful retrieval\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains gacha item details\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"gacha_id\");\r",
									"    pm.expect(responseJson).to.have.property(\"name\");\r",
									"    pm.expect(responseJson).to.have.property(\"rarity\");\r",
									"    pm.expect(responseJson).to.have.property(\"status\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.description).to.exist;\r",
									"  pm.expect(responseData.gacha_id).to.exist;\r",
									"  pm.expect(responseData.image).to.exist;\r",
									"  pm.expect(responseData.name).to.exist;\r",
									"  pm.expect(responseData.rarity).to.exist;\r",
									"  pm.expect(responseData.status).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Gacha id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.gacha_id).to.exist;\r",
									"    pm.expect(responseData.gacha_id).to.be.a('number');\r",
									"    pm.expect(responseData.gacha_id).to.satisfy((val) => val >= 0, \"Gacha id should be non-negative\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Name should be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should be a non-empty string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Rarity should be a valid value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const validRarities = [\"common\", \"rare\", \"epic\", \"legendary\"];\r",
									"    pm.expect(responseData.rarity).to.be.oneOf(validRarities, \"Rarity should be a valid value\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "a43379da-cd6c-492b-8ed4-07c239df57b9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "861c09d1-4d15-4ad2-9194-bc5cc7454506"
							}
						}
					],
					"id": "60a9a79e-0b82-44dd-ac76-05e9e1804fd4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/get/{{gacha_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"get",
								"{{gacha_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Gachas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful retrieval\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Check that gachas have the correct data\r",
									"pm.test(\"Response contains gacha items array\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"message\").that.is.an(\"array\");\r",
									"    responseJson.message.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"gacha_id\");\r",
									"        pm.expect(item).to.have.property(\"name\");\r",
									"        pm.expect(item).to.have.property(\"rarity\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"// pm.test(\"Response time is within an acceptable range\", function () {\r",
									"//   pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"// });\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200 for successful retrieval\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - description, gacha_id, image, name, rarity, and status\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.be.an('array');\r",
									"\r",
									"    responseData.message.forEach(function (gacha) {\r",
									"        pm.expect(gacha).to.have.property('description');\r",
									"        pm.expect(gacha).to.have.property('gacha_id');\r",
									"        pm.expect(gacha).to.have.property('image');\r",
									"        pm.expect(gacha).to.have.property('name');\r",
									"        pm.expect(gacha).to.have.property('rarity');\r",
									"        pm.expect(gacha).to.have.property('status');\r",
									"    });\r",
									"    // console.log(responseData.message[6].gacha_id)\r",
									"    // pm.environment.set(\"gacha_id\", responseData.message[6].gacha_id);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "4448963e-791c-4041-9989-4cb0fb1085ed"
							}
						}
					],
					"id": "a1962fdf-1189-4d21-92c9-2c7afa804c30",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Player Gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed response time test\r",
									"pm.test(\"Status code is 200 for successful update\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.acquired_date).to.exist;\r",
									"    pm.expect(responseData.description).to.exist;\r",
									"    pm.expect(responseData.gacha_id).to.exist;\r",
									"    pm.expect(responseData.image).to.exist;\r",
									"    pm.expect(responseData.locked).to.exist;\r",
									"    pm.expect(responseData.name).to.exist;\r",
									"    pm.expect(responseData.rarity).to.exist;\r",
									"    pm.expect(responseData.status).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Locked status is a boolean value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.locked).to.be.a('boolean');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "0a335c94-7dcc-410f-acfc-d6272548a74b"
							}
						}
					],
					"id": "44b4dcb9-6646-42f9-bbe7-271aff800715",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/get/{{user_id}}/{{gacha_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"get",
								"{{user_id}}",
								"{{gacha_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful retrieval\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains inventory array\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"inventory\").that.is.an(\"array\");\r",
									"    responseJson.inventory.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"gacha_id\");\r",
									"        pm.expect(item).to.have.property(\"name\");\r",
									"        pm.expect(item).to.have.property(\"rarity\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200 for successful retrieval\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the structure of each item in the inventory array\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.inventory).to.be.an('array').that.is.not.empty;\r",
									"    \r",
									"    responseData.inventory.forEach(item => {\r",
									"        pm.expect(item.acquired_date).to.be.a('string');\r",
									"        pm.expect(item.description).to.be.a('string');\r",
									"        pm.expect(item.gacha_id).to.be.a('number');\r",
									"        pm.expect(item.image).to.be.a('string');\r",
									"        pm.expect(item.locked).to.be.a('boolean');\r",
									"        pm.expect(item.name).to.be.a('string');\r",
									"        pm.expect(item.rarity).to.be.a('string');\r",
									"        pm.expect(item.status).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Ensure all items in the inventory array have the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.inventory).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    responseData.inventory.forEach(function(item) {\r",
									"        pm.expect(item.acquired_date).to.be.a('string');\r",
									"        pm.expect(item.description).to.be.a('string');\r",
									"        pm.expect(item.gacha_id).to.be.a('number');\r",
									"        pm.expect(item.image).to.be.a('string');\r",
									"        pm.expect(item.locked).to.be.a('boolean');\r",
									"        pm.expect(item.name).to.be.a('string');\r",
									"        pm.expect(item.rarity).to.be.a('string');\r",
									"        pm.expect(item.status).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "fd006730-88be-4df8-8ca5-47dad1076a2e"
							}
						}
					],
					"id": "ad5c64a0-723d-491b-ac81-6b1137a88b7e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/inventory/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"inventory",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Auction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response schema matches the expected schema\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('email');\r",
									"    pm.expect(responseData).to.have.property('address');\r",
									"    pm.expect(responseData).to.have.property('phone');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "6be86976-5efc-4223-8d96-935c97a8fd42"
							}
						}
					],
					"id": "611558c5-300a-474f-b3d0-ea93ff44a7a2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"gacha_id\": \"{{gacha_id}}\",\n  \"seller_id\": \"{{user_id}}\",\n  \"base_price\": 7\n}"
						},
						"url": {
							"raw": "{{base_url}}/auction/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Auctions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.auctions).to.be.an('array');\r",
									"    responseData.auctions.forEach(function (auction) {\r",
									"        pm.expect(auction.auction_id).to.exist;\r",
									"        pm.expect(auction.base_price).to.exist;\r",
									"        // pm.expect(auction.buyer_id).to.exist;\r",
									"        pm.expect(auction.end_time).to.exist;\r",
									"        pm.expect(auction.gacha_id).to.exist;\r",
									"        pm.expect(auction.highest_bid).to.exist;\r",
									"        pm.expect(auction.seller_id).to.exist;\r",
									"        pm.expect(auction.status).to.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Save the auction_id of the last auction\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const lastAuction = responseData.auctions[responseData.auctions.length - 1];\r",
									"    pm.environment.set(\"last_auction_id\", lastAuction.auction_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "13ebdbd7-d8bb-4417-afa0-fc5a755f47ca"
							}
						}
					],
					"id": "98edf363-bc3e-439d-8c30-ef97ae0c443e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Gacha Auctions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function (auction) {\r",
									"        pm.expect(auction.auction_id).to.exist;\r",
									"        pm.expect(auction.base_price).to.exist;\r",
									"        pm.expect(auction.buyer_id).to.exist;\r",
									"        pm.expect(auction.end_time).to.exist;\r",
									"        pm.expect(auction.gacha_id).to.exist;\r",
									"        pm.expect(auction.highest_bid).to.exist;\r",
									"        pm.expect(auction.seller_id).to.exist;\r",
									"        pm.expect(auction.status).to.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Auction_id is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(function (auction) {\r",
									"        pm.expect(auction.auction_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Auction_id should not be empty\");\r",
									"\r",
									"        console.log(responseData[0].auction_id)\r",
									"        pm.environment.set(\"auction_id\", responseData[0].auction_id)\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Highest_bid is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(function (auction) {\r",
									"        pm.expect(auction.highest_bid).to.be.a('number');\r",
									"        pm.expect(auction.highest_bid).to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the schema of the response body\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function (item) {\r",
									"        pm.expect(item).to.be.an('object');\r",
									"        pm.expect(item.auction_id).to.be.a('string');\r",
									"        pm.expect(item.base_price).to.be.a('number');\r",
									"        pm.expect(item.buyer_id).to.be.a('number');\r",
									"        pm.expect(item.end_time).to.be.a('number');\r",
									"        pm.expect(item.gacha_id).to.be.a('number');\r",
									"        pm.expect(item.highest_bid).to.be.a('number');\r",
									"        pm.expect(item.seller_id).to.be.a('number');\r",
									"        pm.expect(item.status).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "484e5d72-098a-4762-bbd7-757fa07f5000"
							}
						}
					],
					"id": "1b745c37-7164-4877-82ca-98444dc6d8ee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction//get_gacha_auctions?gacha_id={{gacha_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"",
								"get_gacha_auctions"
							],
							"query": [
								{
									"key": "gacha_id",
									"value": "{{gacha_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Place Bid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response schema matches the expected schema\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message field is present in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "fcf0d469-6bb4-490d-90e4-a715ad20da2b"
							}
						}
					],
					"id": "2220177d-7cb3-453b-8981-0dc4d911bb85",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"auction_id\": \"{{auction_id}}\",\n  \"user_id\": \"1\",\n  \"bid_amount\": 13\n}"
						},
						"url": {
							"raw": "{{base_url}}/auction/bid",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"bid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Bids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.bids).to.be.an('array');\r",
									"    \r",
									"    responseData.bids.forEach(function(bid) {\r",
									"        pm.expect(bid.auction_id).to.exist;\r",
									"        pm.expect(bid.bid_amount).to.exist;\r",
									"        pm.expect(bid.bid_id).to.exist;\r",
									"        pm.expect(bid.bid_time).to.exist;\r",
									"        pm.expect(bid.user_id).to.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Bids array is present and contains expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.bids).to.exist.and.to.be.an('array');\r",
									"    pm.expect(responseData.bids.length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Bids data properties validation\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.bids).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    responseData.bids.forEach(function(bid) {\r",
									"        pm.expect(bid.auction_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Auction ID should be a non-empty string\");\r",
									"        pm.expect(bid.bid_amount).to.be.a('number').and.to.be.at.least(0, \"Bid amount should be a non-negative integer\");\r",
									"        pm.expect(bid.bid_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Bid ID should be a non-empty string\");\r",
									"        pm.expect(bid.user_id).to.be.a('number').and.to.be.at.least(0, \"User ID should be a non-negative integer\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "e249c5cd-c676-49b1-b23c-d95785058f27"
							}
						}
					],
					"id": "a8d69500-1a80-425b-a284-9638319982fb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction//bids?auction_id={{last_auction_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"",
								"bids"
							],
							"query": [
								{
									"key": "auction_id",
									"value": "{{last_auction_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "79cc54bd-4676-49b7-80d8-dc98fd65a2db"
							}
						}
					],
					"id": "47f998a8-64bf-41b0-bb6e-1ef12997367a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"session_token\": \"{{session_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"id": "7eca4cc2-9215-4233-b8de-bfee39680a3c"
		},
		{
			"name": "GCTA Negative Tests",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "63f66b61-2b06-48a1-8743-8c632b63648f"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400 for invalid input\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400); // Adjust expected code based on API behavior\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is provided\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.exist;\r",
									"    pm.expect(response.message).to.include(\"Invalid input\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "6717efd5-753a-4ec9-9cdc-ec383fa7881d"
							}
						}
					],
					"id": "1bd83ff2-d53f-4b96-b00a-e3f25ccefa78",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "invalidemail",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/users/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401 for incorrect credentials\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"Invalid credentials\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "d3dec6fc-9989-4fb1-9580-d07a75367631"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "51ba2a43-acb9-4090-881d-1549b2db8ad3"
							}
						}
					],
					"id": "221f7c9d-a771-45ec-acdf-967a6cbc1d70",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"nonexistentuser\",\n    \"password\": \"somepassword\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body should have the correct schema\", function () {\r",
									"  const responseData = pm.response.text();\r",
									"  pm.expect(responseData).to.include('Internal Server Error');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "2a0243a3-4341-43ae-8a48-17bbe852b1c5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Retrieve the original email from the environment\r",
									"const originalEmail = pm.environment.get(\"email\");\r",
									"\r",
									"if (originalEmail) {\r",
									"    // Add \"updated\" in front of the original email\r",
									"    const updatedEmail = `updated_${originalEmail}`;\r",
									"    \r",
									"    // Save the updated email back to the environment\r",
									"    pm.environment.set(\"email\", updatedEmail);\r",
									"    console.log(\"Updated email saved:\", updatedEmail);\r",
									"} else {\r",
									"    console.log(\"Original email not found in the environment.\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "bc360691-9714-443c-9569-557422f4917a"
							}
						}
					],
					"id": "b552362e-988c-47c7-81fb-49fb4b66eaf5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\",\n  \"email\": \"{{email@email.com}}\",\n  \"image\": \"\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/auth/update",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Real Money Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"401 Unauthorized: Token expired!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "fe95493a-a251-401a-afb9-24980ed123b6"
							}
						}
					],
					"id": "0f00ec75-8369-42a2-9593-53a22478b7fa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": \"9999999999\",\n  \"amount\": 50\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/player/real_money_transaction",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"player",
								"real_money_transaction"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"401 Unauthorized: Token expired!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "ab16377f-61f8-4a3a-8150-53fb6f5f259e"
							}
						}
					],
					"id": "2d3f7482-7594-45fd-8932-1294f8fd722c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/player/get_user_balance/9999999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"player",
								"get_user_balance",
								"9999999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "roll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"401 Unauthorized: Token expired!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "affaa124-244c-4d7a-ae8b-a5e164b90e3c"
							}
						}
					],
					"id": "0b81d5fc-260b-4d12-ba4a-f2ad81a05a68",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": \"9999999999\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/gacha/roll",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"roll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"401 Unauthorized: Token expired!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "17c30e78-4a24-49f7-97f8-33c31ec42dc4"
							}
						}
					],
					"id": "e3bb6ecc-d0d0-4c8f-8e4f-00ecfe448ac8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/transaction/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"Transaction not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "31009bb8-c562-42ed-8958-2c5570502d69"
							}
						}
					],
					"id": "9b7541a5-8a5a-4025-aea5-c04ab8616679",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/transaction/get_transaction?transaction_id=9999999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"get_transaction"
							],
							"query": [
								{
									"key": "transaction_id",
									"value": "9999999999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"No transactions found for the user\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "b1ebba4e-4f9a-451c-b37e-dacea360d2d8"
							}
						}
					],
					"id": "f4b0d2d7-e397-473a-a06a-8f15b9e95774",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/transaction/get_user_transactions?user_id=9999999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"get_user_transactions"
							],
							"query": [
								{
									"key": "user_id",
									"value": "9999999999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get One Gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"Gacha item not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "97af2cd3-2cf1-4d4c-adb8-48a9f6d554ff"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "ebf0e655-b8dd-415d-98d6-8ee0d0a5fa8f"
							}
						}
					],
					"id": "829dde81-3726-4a3a-bc64-ab6b01bf4e44",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/get/9999999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"get",
								"9999999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Gachas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"Gacha item not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "9497d51c-3648-4cb8-8749-86062f372deb"
							}
						}
					],
					"id": "8392d9e3-3ac3-41ea-9781-350b9d299a01",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Player Gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"401 Unauthorized\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "10009694-d089-4f4d-91fe-f859169ec14b"
							}
						}
					],
					"id": "5ea04fca-9c60-44b2-bfa3-d3bb0e175630",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/get/{{user_id}}/99999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"get",
								"{{user_id}}",
								"99999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"401 Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "9046ba0e-9692-4173-80b7-afb954a60366"
							}
						}
					],
					"id": "b2dfa4a1-d801-47de-9ac2-875e9a4864f7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/inventory/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"inventory",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Auction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"Gacha is locked or does not exist\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "7f26d8c0-31c3-4477-81e9-9e248e2e395e"
							}
						}
					],
					"id": "c3dccf43-8274-4a37-b7ed-79aa04229896",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"gacha_id\": \"noexistentgacha\",\n  \"seller_id\": \"{{user_id}}\",\n  \"base_price\": 7\n}"
						},
						"url": {
							"raw": "{{base_url}}/auction/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Auctions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"401 Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "b1789eb6-4f3f-41c2-bc2c-f2eed8a60bbb"
							}
						}
					],
					"id": "98208437-c9a7-4d9d-81f8-a77a54aefa48",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Gacha Auctions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"No auctions found for the gacha\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "f538fc1e-fb3b-4172-b65c-52da02b724df"
							}
						}
					],
					"id": "55407686-9bee-4783-ae78-4a778db7a5f4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction//get_gacha_auctions?gacha_id=999999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"",
								"get_gacha_auctions"
							],
							"query": [
								{
									"key": "gacha_id",
									"value": "999999999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Place Bid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"Auction not found or already ended\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "30d2861a-f5b0-4b5a-8b6d-90a96a06d4bc"
							}
						}
					],
					"id": "304d97ed-8fa2-4b49-b7d3-60df9aa03f61",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"auction_id\": \"99999999\",\n  \"user_id\": \"1\",\n  \"bid_amount\": 13\n}"
						},
						"url": {
							"raw": "{{base_url}}/auction/bid",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"bid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Bids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"Missing auction_id parameter\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "2b8eaf9b-192b-4628-9fc2-2150cdb467bd"
							}
						}
					],
					"id": "cb89507e-9006-4e5b-b8f5-8d11fe60a0d8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction/bids?auction_id=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"bids"
							],
							"query": [
								{
									"key": "auction_id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"401 Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "aa24de19-7942-455c-b421-9fa7ab13592b"
							}
						}
					],
					"id": "19441bc8-094e-48db-b791-9a414c988ef4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"session_token\": \"nosession\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"id": "bdf307bc-3030-4238-ac50-4e3f293c52ad"
		}
	]
}