openapi: 3.0.0
info:
  title: Gacha Game Backend API
  version: 1.0.0
  description: API for managing gacha rolls, user inventories, auctions, transactions, and user authentication.
servers:
  - url: http://localhost:8080
    description: Local development server
tags:
  - name: PLAYER
    description: Player-specific operations and authentication
  - name: ADMIN
    description: Administrative functions and authentication
  - name: TRANSACTION
    description: Handles in-game currency transactions for players and administrators
  - name: AUCTIONS
    description: Handles the creation and management of auctions and bids
  - name: GACHA
    description: Handles gacha items and inventory management
paths:
  /users/auth/register:
    post:
      tags:
        - PLAYER
      summary: Register a new player
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: new_player123
                password:
                  type: string
                  example: securepassword
                email:
                  type: string
                  example: new_player@example.com
      responses:
        '201':
          description: Player successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Player registered successfully
        '400':
          description: Invalid request (e.g., missing fields or malformed data)
  /users/auth/login:
    post:
      tags:
        - PLAYER
      summary: Login a player and retrieve a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: player123
                password:
                  type: string
                  example: securepassword
      responses:
        '200':
          description: Successful login and returns a JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: jwt_token
        '401':
          description: Invalid credentials
  /users/auth/logout:
    post:
      tags:
        - PLAYER
      summary: Logout the player
      responses:
        '200':
          description: Successful logout
        '401':
          description: Unauthorized access (invalid or missing token)
  /users/auth/reset_pwd:
    post:
      tags:
        - PLAYER
      summary: Request a password reset for the player
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: player123@example.com
      responses:
        '200':
          description: Password reset link sent to the player's email
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset email sent
        '404':
          description: Player with the specified email not found
  /users/admin_auth/register:
    post:
      tags:
        - ADMIN
      summary: Register a new admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: new_admin123
                password:
                  type: string
                  example: securepassword
                email:
                  type: string
                  example: new_admin@example.com
      responses:
        '201':
          description: Admin successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Admin registered successfully
        '400':
          description: Invalid request (e.g., missing fields or malformed data)
  /users/admin_auth/login:
    post:
      tags:
        - ADMIN
      summary: Login an admin and retrieve a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: admin123
                password:
                  type: string
                  example: securepassword
      responses:
        '200':
          description: Successful login and returns a JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: jwt_token
        '401':
          description: Invalid credentials
  /users/admin_auth/logout:
    post:
      tags:
        - ADMIN
      summary: Logout the admin
      responses:
        '200':
          description: Successful logout
        '401':
          description: Unauthorized access (invalid or missing token)
  /users/admin_auth/reset_pwd:
    post:
      tags:
        - ADMIN
      summary: Request a password reset for the admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: admin123@example.com
      responses:
        '200':
          description: Password reset link sent to the admin's email
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset email sent
        '404':
          description: Admin with the specified email not found
  /users/player/profile:
    get:
      tags:
        - PLAYER
      summary: Retrieve the player's profile information
      responses:
        '200':
          description: Returns the player's profile information
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: player123
                  email:
                    type: string
                    example: player123@example.com
                  currency_balance:
                    type: integer
                    example: 150
                  gacha_collection:
                    type: array
                    items:
                      type: string
                    example:
                      - gacha_001
                      - gacha_002
        '401':
          description: Unauthorized access (invalid or missing token)
  /users/player/inventory:
    get:
      tags:
        - PLAYER
      summary: Retrieve the player's current inventory of gacha items
      responses:
        '200':
          description: Returns the list of gacha items the player owns
          content:
            application/json:
              schema:
                type: object
                properties:
                  inventory:
                    type: array
                    items:
                      type: object
                      properties:
                        item_id:
                          type: string
                          example: gacha_001
                        name:
                          type: string
                          example: Dragon Sword
                        rarity:
                          type: string
                          example: Epic
                    example:
                      - item_id: gacha_001
                        name: Dragon Sword
                        rarity: Epic
                      - item_id: gacha_002
                        name: Mystic Shield
                        rarity: Rare
        '401':
          description: Unauthorized access (invalid or missing token)
  /users/player/bids:
    get:
      tags:
        - PLAYER
      summary: Get the list of active bids the player has placed on auctions
      responses:
        '200':
          description: Returns a list of player's active bids
          content:
            application/json:
              schema:
                type: object
                properties:
                  bids:
                    type: array
                    items:
                      type: object
                      properties:
                        auction_id:
                          type: string
                          example: auction_123
                        bid_amount:
                          type: integer
                          example: 500
                        bid_time:
                          type: string
                          format: date-time
                          example: '2023-12-01T15:45:00Z'
                    example:
                      - auction_id: auction_123
                        bid_amount: 500
                        bid_time: '2023-12-01T15:45:00Z'
        '401':
          description: Unauthorized access (invalid or missing token)
  /transaction/make_payment:
    post:
      tags:
        - TRANSACTION
      summary: Make a payment for a gacha roll purchase or an auction bid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: player123
                transaction_type:
                  type: string
                  enum:
                    - roll_purchase
                    - auction_bid
                  example: roll_purchase
                amount:
                  type: integer
                  example: 300
      responses:
        '200':
          description: Payment successful, balance updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Payment successful
                  new_balance:
                    type: integer
                    example: 1200
        '400':
          description: Invalid request (e.g., insufficient funds)
        '401':
          description: Unauthorized (token missing or invalid)
        '403':
          description: Forbidden (user does not have enough funds)
  /transaction/auction_lock:
    post:
      tags:
        - TRANSACTION
      summary: Lock funds for an auction bid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: player123
                bid_amount:
                  type: integer
                  example: 500
      responses:
        '200':
          description: Bid accepted, user has enough funds
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Bid accepted
        '401':
          description: Unauthorized (token missing or invalid)
        '403':
          description: Insufficient funds for the bid
  /transaction/auction_lock/{username}/{auction_id}:
    delete:
      tags:
        - TRANSACTION
      summary: Remove a lock from a user's currency
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: Username of the user to unlock
        - name: auction_id
          in: path
          required: true
          schema:
            type: string
          description: Id of the auction
      responses:
        '200':
          description: Auction lock removed, balance updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Auction lock removed
                  new_balance:
                    type: integer
                    example: 1200
        '401':
          description: Unauthorized (token missing or invalid)
        '404':
          description: User not found or no funds locked
  /auctions/all:
    get:
      tags:
        - AUCTIONS
      summary: Retrieve all active or expired auctions
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - active
              - expired
          description: Filter auctions based on status (active or expired)
      responses:
        '200':
          description: Returns a list of all auctions
          content:
            application/json:
              schema:
                type: object
                properties:
                  auctions:
                    type: array
                    items:
                      type: object
                      properties:
                        auction_id:
                          type: string
                          example: auction_001
                        gacha_id:
                          type: string
                          example: gacha_001
                        base_price:
                          type: integer
                          example: 200
                        highest_bid:
                          type: integer
                          example: 500
                        status:
                          type: string
                          example: active
                        end_time:
                          type: string
                          format: date-time
                          example: '2023-10-05T14:48:00Z'
                    example:
                      - auction_id: auction_001
                        gacha_id: gacha_001
                        base_price: 200
                        highest_bid: 500
                        status: active
                        end_time: '2023-10-05T14:48:00Z'
        '400':
          description: Invalid request
  /auctions/add:
    post:
      tags:
        - AUCTIONS
      summary: Add a new auction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                gacha_id:
                  type: string
                  example: gacha_001
                base_price:
                  type: integer
                  example: 200
                end_time:
                  type: string
                  format: date-time
                  example: '2023-12-01T15:45:00Z'
      responses:
        '201':
          description: Auction successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Auction created successfully
                  auction_id:
                    type: string
                    example: auction_001
        '400':
          description: Invalid request
        '401':
          description: Unauthorized (token missing or invalid)
  /auctions/end:
    post:
      tags:
        - AUCTIONS
      summary: End an auction by auction ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                auction_id:
                  type: string
                  example: auction_001
      responses:
        '200':
          description: Auction successfully ended
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Auction ended successfully
        '401':
          description: Unauthorized (token missing or invalid)
        '404':
          description: Auction not found
  /gacha/roll:
    post:
      tags:
        - GACHA
      summary: Roll a gacha for a random item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: player123
                roll_cost:
                  type: integer
                  example: 100
      responses:
        '200':
          description: Successfully rolled a gacha item
          content:
            application/json:
              schema:
                type: object
                properties:
                  gacha_id:
                    type: string
                    example: gacha_001
                  name:
                    type: string
                    example: Dragon Sword
                  rarity:
                    type: string
                    example: Epic
                  message:
                    type: string
                    example: Gacha roll successful
        '400':
          description: Insufficient funds for the roll or other request error
        '401':
          description: Unauthorized (token missing or invalid)
  /gacha/inventory/{user_id}:
    get:
      tags:
        - GACHA
      summary: Retrieve the gacha inventory of a given user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user whose gacha inventory is being retrieved
      responses:
        '200':
          description: Returns the gacha inventory for the specified user
          content:
            application/json:
              schema:
                type: object
                properties:
                  inventory:
                    type: array
                    items:
                      type: object
                      properties:
                        gacha_id:
                          type: string
                          example: gacha_001
                        name:
                          type: string
                          example: Dragon Sword
                        rarity:
                          type: string
                          example: Epic
                    example:
                      - gacha_id: gacha_001
                        name: Dragon Sword
                        rarity: Epic
                      - gacha_id: gacha_002
                        name: Mystic Shield
                        rarity: Rare
        '404':
          description: User or inventory not found
  /gacha/inventory:
    post:
      tags:
        - GACHA
      summary: Add a gacha to a user's inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: player123
                gacha_id:
                  type: string
                  example: gacha_001
      responses:
        '201':
          description: Gacha item successfully added to user's inventory
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Gacha item successfully added to user's inventory
        '400':
          description: Missing data to add to inventory
        '404':
          description: User not found or gacha item not available
  /gacha/admin/add:
    post:
      tags:
        - GACHA
      summary: Add a new gacha item to the system (admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                gacha_id:
                  type: string
                  example: gacha_001
                name:
                  type: string
                  example: Jeep '98
                rarity:
                  type: string
                  example: Epic
                description:
                  type: string
                  example: A rare jeep with old style model.
      responses:
        '201':
          description: New gacha successfully added
        '400':
          description: Invalid input or duplicate gacha ID
        '401':
          description: Unauthorized (token missing or invalid)
  /gacha/admin/update/{gacha_id}:
    put:
      tags:
        - GACHA
      summary: Update an existing gacha item (admin only)
      parameters:
        - name: gacha_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Jeep '98
                rarity:
                  type: string
                  example: Epic
                description:
                  type: string
                  example: A rare jeep with old style model.
                status:
                  type: string
                  example: available
      responses:
        '200':
          description: Gacha item successfully updated
        '401':
          description: Unauthorized (token missing or invalid)
        '404':
          description: Gacha not found
  /gacha/admin/delete/{gacha_id}:
    delete:
      tags:
        - GACHA
      summary: Delete a gacha item from the system (admin only)
      parameters:
        - name: gacha_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Gacha item successfully deleted
        '401':
          description: Unauthorized (token missing or invalid)
        '404':
          description: Gacha not found