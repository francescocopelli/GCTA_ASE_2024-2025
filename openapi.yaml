openapi: 3.0.0
info:
  title: Gacha Game Backend API
  version: 1.0.0
  description: API for managing gacha rolls, user inventories, auctions, transactions, and user authentication.
servers:
  - url: http://localhost:8080
    description: Local development server
tags:
  - name: PLAYER
    description: Player-specific operations and authentication
  - name: ADMIN
    description: Administrative functions and authentication
  - name: TRANSACTION
    description: Handles in-game currency transactions for players and administrators
  - name: AUCTIONS
    description: Handles the creation and management of auctions and bids
  - name: GACHA
    description: Handles gacha items and inventory management
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
paths:
  /users/auth/login:
    post:
      tags:
        - PLAYER
      summary: Login a player
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: player123
                password:
                  type: string
                  example: securepassword
      responses:
        '200':
          description: Successful login
        '401':
          description: Invalid credentials
        '500':
          description: Database error
        '501':
          description: Unexpected error
  /users/auth/register:
    post:
      tags:
        - PLAYER
      summary: Register a new player
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: new_player123
                password:
                  type: string
                  example: securepassword
                email:
                  type: string
                  example: new_player@example.com
                image:
                  type: object
      responses:
        '200':
          description: Player successfully registered
        '400':
          description: Missing required fields
        '409':
          description: Username or email already exists
        '500':
          description: Unexpected error
  /users/auth/logout:
    delete:
      tags:
        - PLAYER
      summary: Logout a player
      responses:
        '200':
          description: Successful logout
        '401':
          description: Invalid user type
        '500':
          description: Unexpected error        
  /users/auth/delete:
    delete:
      tags:
        - PLAYER
      summary: Delete a user account
      responses:
        '200':
          description: Account deleted successfully
        '400':
          description: Session token is required
        '408':
          description: Session token not found
        '500':
          description: Unexpected error
  /users/player/update:
    put:
      tags:
        - PLAYER
      summary: Update player account details
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: updated_username
                password:
                  type: string
                  example: updated_password
                email:
                  type: string
                  example: updated_email@example.com
                image:
                  type: object           
      responses:
        '200':
          description: Account successfully updated
        '400':
          description: Invalid user type
        '408':
          description: User not found
        '500':
          description: Unexpected error
        
          
  /users/player/my_gacha_list:
    get:
      tags:
        - PLAYER
      summary: Retrieve the list of gacha items for a user
      responses:
        '200':
          description: List of gacha items retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    gacha_id:
                      type: string
                      example: "1"
                    name:
                      type: string
                      example: "Auto"
                    rarity:
                      type: string
                      example: "epic"
                    status:
                      type: string
                      example: "available"
                    description:
                      type: string
                      example: "Fast auto"
                    image:
                      type: string
                      format: base64
                      example: "iVBORw0KGgoAAAANSUhEUgAA..."
                    locked:
                      type: string
                      example: "unlocked"
                    acquired_date:
                      type: string
                      example: "2023-10-01T12:00:00Z"
        '404':
          description: No gacha items found for the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No gacha items found for the user"

  /users/player/gacha/{user_id}/{gacha_id}:
    get:
      tags:
        - PLAYER
      summary: Retrieve information about a specific gacha item for a user
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          example: "1"
        - in: path
          name: gacha_id
          required: true
          schema:
            type: string
          example: "1"
      responses:
        '200':
          description: Gacha item information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  gacha_id:
                    type: string
                    example: "1"
                  name:
                    type: string
                    example: "Auto"
                  rarity:
                    type: string
                    example: "epic"
                  status:
                    type: string
                    example: "available"
                  description:
                    type: string
                    example: "Fast auto"
                  image:
                    type: string
                    format: base64
                    example: "iVBORw0KGgoAAAANSUhEUgAA..."
        '404':
          description: User not found or gacha item not found

  /users/player/real_money_transaction:
    post:
      tags:
        - PLAYER
      summary: Handle real money transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  example: 100.0
      responses:
        '200':
          description: Account topped up successfully
        '400':
          description: Missing amount for transaction or invalid amount

  /users/player/get_user_balance:
    get:
      tags:
        - PLAYER
      summary: Retrieve the balance of a user
      responses:
        '200':
          description: User balance retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  currency_balance:
                    type: number
                    example: 1500.0
        '400':
          description: Invalid user type
        '408':
          description: User not found
        '500':
          description: Unexpected error

  /users/player/get_user:
    get:
      tags:
        - PLAYER
      summary: Get user information
      description: Retrieve information for the authenticated user. Only users with the 'PLAYER' type can access this endpoint.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User information retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
                  currency_balance:
                    type: number
                  image:
                    type: object
                  session_token:
                    type: string
        '404':
          description: User not found
        '500':
          description: Unexpected error
  /users/player/get_user/{user_id}:
    get:
      tags:
        - PLAYER
      summary: Get user information by ID (Admin only)
      description: >-
        Retrieve user information by ID. This endpoint is restricted to admin users 
        and is hidden from the API documentation.
      parameters:
        - name: user_id
          in: path
          required: true
          description: The ID of the user to retrieve.
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User information retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
                  currency_balance:
                    type: number
                  image:
                    type: object
                  session_token:
                    type: string
        '404':
          description: User not found
        '500':
          description: Unexpected error
  /users/player/update_balance/{user_type}:
    put:
      tags:
        - PLAYER
      summary: Update the balance of a user
      parameters:
        - in: path
          name: user_type
          required: true
          schema:
            type: string
            enum: [PLAYER, ADMIN]
          example: "PLAYER"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  example: "1"
                amount:
                  type: string
                  example: "100"
                type:
                  type: string
                  example: "credit"
      responses:
        '200':
          description: Balance updated successfully
        '400':
          description: Missing data to update balance
        '404':
          description: User not found
        '500':
          description: Unexpected error

  /users/admin_auth/register:
    post:
      tags:
        - ADMIN
      summary: Register a new admin
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: new_admin123
                password:
                  type: string
                  example: securepassword
                email:
                  type: string
                  example: new_admin@example.com
      responses:
        '201':
          description: Admin successfully registered
        '400':
          description: Missing required fields
        '409':
          description: Username or email already exists
        '500':
          description: Unexpected error
  /users/admin_auth/login:
    post:
      tags:
        - ADMIN
      summary: Login an admin and retrieve a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: admin123
                password:
                  type: string
                  example: securepassword
      responses:
        '200':
          description: Successful login and returns a JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: jwt_token
                  message:
                    type: string
                    example: Login successful
                  user_id:
                    type: string
                    example: "1"
        '400':
          description: Invalid user type
        '401':
          description: Invalid credentials
        '500':
          description: Database error
          
  /users/admin_auth/logout:
    delete:
      tags:
        - ADMIN
      summary: Logout the admin
      responses:
        '200':
          description: Successful logout
        '401':
          description: Invalid user type
        '500':  
          description: Unexpected error

  /transaction/add_transaction:
    post:
      tags:
        - TRANSACTION
      summary: Add a new transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  example: "1"
                amount:
                  type: number
                  example: 100.0
                type:
                  type: string
                  example: "credit"
      responses:
        '200':
          description: Transaction added successfully
        '500':
          description: Failed to add transaction

  /transaction/get_user_transactions/{user_id}:
    get:
      tags:
        - TRANSACTION
      summary: Retrieve all transactions for a user
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          example: "1"
      responses:
        '200':
          description: Transactions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    transaction_id:
                      type: string
                      example: "txn_001"
                    user_id:
                      type: string
                      example: "1"
                    amount:
                      type: number
                      example: 100.0
                    type:
                      type: string
                      example: "credit"
                    timestamp:
                      type: string
                      format: date-time
                      example: "2023-10-01T12:00:00Z"
        '400':
          description: User_id not found
        '404':
          description: No transactions found
  /transaction/get_user_transactions:
    get:
      tags:
        - TRANSACTION
      summary: Retrieve all transactions for current user
      responses:
        '200':
          description: Transactions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  transaction_id:
                    type: string
                    example: "txn_001"
                  user_id:
                    type: string
                    example: "1"
                  amount:
                    type: number
                    example: 100.0
                  type:
                    type: string
                    example: "credit"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2023-10-01T12:00:00Z"
        '400':
          description: User_id not found
        '403':
          description: Admin can not get their own transactions
        '404':
          description: No transactions found
  /transaction/get_transaction:
    get:
      tags:
        - TRANSACTION
      summary: Retrieve a specific transaction
      parameters:
        - in: query
          name: transaction_id
          required: true
          schema:
            type: string
          example: "txn_001"
      responses:
        '200':
          description: Transaction retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  transaction_id:
                    type: string
                    example: "txn_001"
                  user_id:
                    type: string
                    example: "1"
                  amount:
                    type: number
                    example: 100.0
                  type:
                    type: string
                    example: "credit"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2023-10-01T12:00:00Z"
        '404':
          description: Transaction not found
  /transaction/all:
    get:
      tags:
        - TRANSACTION
      summary: Retrieve all transactions
      description: Retrieve all transactions from the database.
      parameters:
        - in: query
          name: user_id
          required: false
          schema:
            type: string
          example: "1"
      responses:
        '200':
          description: A JSON array of all transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    transaction_id:
                      type: integer
                      example: 1
                    user_id:
                      type: integer
                      example: 123
                    amount:
                      type: number
                      format: integer
                      example: 100
                    date:
                      type: string
                      format: date-time
                      example: "2023-10-01T12:00:00Z"
        '404':
          description: No transactions found
                    
  /auctions/add:
    post:
      tags:
        - AUCTIONS
      summary: Add a new auction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                gacha_id:
                  type: string
                  example: "1"
                base_price:
                  type: number
                  example: 100.0
      responses:
        '201':
          description: Auction created successfully
        '400':
          description: Missing data to create auction
        '403':
          description: Unauthorized access
        '404':
          description: Gacha is locked or not exist
        '500':
          description: Unexpected error

  /auctions/check_auction_status:
    get:
      tags:
        - AUCTIONS
      summary: Check and update the status of auctions
      responses:
        '200':
          description: Auction status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Auction status updated successfully"
        '500':
          description: An error occurred while checking auction status
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An error occurred while checking auction status"
  /auctions/all:
    get:
      tags:
        - AUCTIONS
      summary: Retrieve all auctions or filter by auction status
      description: |
        This endpoint retrieves all auctions from the database. Optionally, it can filter
        the auctions based on their status (active or expired) using a query parameter.
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [active, expired, completed]
          description: The status of the auctions to filter by. Can be "active" or "expired".
      responses:
        '200':
          description: A JSON response containing a list of auctions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  auctions:
                    type: array
                    items:
                      type: object
                      additionalProperties: true
        '500':
          description: Unexpected error occurred
  /auctions/all_active:
    get:
      tags:
        - AUCTIONS
      summary: Retrieve all auctions or filter by auction status
      responses:
        '200':
          description: A JSON response containing a list of auctions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  auctions:
                    type: array
                    items:
                      type: object
                      additionalProperties: true
        '500':
          description: Unexpected error occurred
  /auctions/get_gacha_auctions:
    get:
      tags:
        - AUCTIONS
      summary: Retrieve gacha auctions based on gacha_id
      description: |
        This endpoint handles GET requests to fetch auctions associated with a specific gacha_id.
      parameters:
        - in: query
          name: gacha_id
          schema:
            type: string
          required: true
          description: The ID of the gacha to retrieve auctions for.
      responses:
        '200':
          description: A JSON response containing the list of auctions.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  additionalProperties: true
        '400':
          description: Missing gacha_id parameter
        '404':
          description: No auctions found for the gacha
        '500':
          description: Database error occurred
  /auctions/bid:
    post:
      tags:
        - AUCTIONS
      summary: Place a bid on an auction
      description: |
        This endpoint allows a user to place a bid on an auction.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                auction_id:
                  type: string
                bid_amount:
                  type: number
      responses:
        '200':
          description: Bid placed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Missing data for bid
        '403':
          description: You can't place a bid as an admin
        '408':
          description: Auction not found or already ended
        '409':
          description: Failed to place bid
        '500':
          description: Database error occurred
  /auctions/bids:
    get:
      tags:
        - AUCTIONS
      summary: Retrieve bids for a specific auction
      description: |
        This endpoint handles GET requests to retrieve bids for a specific auction.
      parameters:
        - in: query
          name: auction_id
          schema:
            type: string
          required: true
          description: The ID of the auction to retrieve bids for.
      responses:
        '200':
          description: A JSON response containing the list of bids.
          content:
            application/json:
              schema:
                type: object
                properties:
                  bids:
                    type: array
                    items:
                      type: object
                      additionalProperties: true
        '400':
          description: Missing auction_id parameter
        '500':
          description: Database error occurred
  /auctions/my:
    get:
      summary: Retrieve all auctions for the authenticated user
      description: >-
        Retrieves auctions associated with the authenticated user. Only non-admin users can access this endpoint.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved user's auctions.
        '403':
          description: Admins cannot access this endpoint.
        '500':
          description: Internal server error.
      tags:
        - Auctions

  /auctions/get_auction:
    get:
      summary: Retrieve auction details
      description: Retrieve details for a specific auction using either auction_id or user_id. 
      parameters:
        - name: auction_id
          in: query
          required: false
          description: The ID of the auction.
          schema:
            type: string
        - name: user_id
          in: query
          required: false
          description: The ID of the user.
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved auction details.
        '400':
          description: Missing or conflicting parameters.
        '404':
          description: Auction not found.
        '500':
          description: Database or internal error.
      tags:
        - Auctions

  /auctions/highest_bid:
    get:
      summary: Retrieve the highest bid for a specific auction
      description: Retrieve the highest bid amount for a specific auction using the gacha_id parameter.
      parameters:
        - name: gacha_id
          in: query
          required: true
          description: The Gacha ID of the auction.
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved the highest bid.
        '400':
          description: Missing gacha_id parameter.
        '404':
          description: Auction not found.
        '500':
          description: Database or internal error.
      tags:
        - Auctions

  /auctions/update:
    put:
      summary: Update an auction
      description: Update an existing auction using the provided data. The auction must belong to the user.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                auction_id:
                  type: string
                  description: The ID of the auction to update.
                base_price:
                  type: number
                end_time:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Successfully updated the auction.
        '400':
          description: Missing or invalid parameters.
        '403':
          description: Unauthorized access to the auction.
        '404':
          description: Auction not found.
        '500':
          description: Database or internal error.
      tags:
        - Auctions

  /auctions/delete:
    delete:
      summary: Delete an auction
      description: Delete an existing auction using the gacha_id parameter.
      parameters:
        - name: gacha_id
          in: query
          required: true
          description: The Gacha ID of the auction to delete.
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted the auction.
        '400':
          description: Missing or invalid gacha_id parameter.
        '404':
          description: Auction not found.
        '500':
          description: Database or internal error.
      tags:
        - Auctions
  /gacha/add:
    post:
      tags:
        - GACHA
      summary: Add a new gacha item
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                rarity:
                  type: string
                status:
                  type: string
                description:
                  type: string
                image:
                  type: string
                  format: binary
      responses:
        '201':
          description: Gacha item added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Missing data to add gacha item
        '500':
          description: Database error

  /gacha/roll:
    post:
      tags:
        - GACHA
      summary: Perform a gacha roll for a random item
      responses:
        '200':
          description: Gacha roll successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  gacha_id:
                    type: string
                  name:
                    type: string
                  rarity:
                    type: string
        '400':
          description: Missing data for gacha roll
        '403':
          description: Insufficient funds for gacha roll
        '500':
          description: Failed to add gacha item to user inventory

  /gacha/inventory/{user_id}:
    get:
      tags:
        - GACHA
      summary: Retrieve a user's gacha inventory
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User inventory retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  inventory:
                    type: array
                    items:
                      type: object
                      properties:
                        gacha_id:
                          type: string
                        name:
                          type: string
                        rarity:
                          type: string
                        status:
                          type: string
                        description:
                          type: string
                        acquired_date:
                          type: string
                        locked:
                          type: boolean
                        image:
                          type: string
        '404':
          description: No gacha items found for user
  /gacha/inventory/add:
    post:
      tags:
        - GACHA
      summary: Add a gacha item to a user's inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                gacha_id:
                  type: string
      responses:
        '201':
          description: Gacha item successfully added to user's inventory
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Missing data to add gacha to inventory
        '404':
          description: User or gacha item not found
  /gacha/all:
    get:
      tags:
        - GACHA
      summary: Retrieve all gacha items
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip
      responses:
        '200':
          description: Gacha items retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: array
                    items:
                      type: object
                      properties:
                        gacha_id:
                          type: string
                        name:
                          type: string
                        rarity:
                          type: string
                        status:
                          type: string
                        description:
                          type: string
                        image:
                          type: string
        '404':
          description: No gacha items found
  /gacha/update:
    put:
      tags:
        - GACHA
      summary: Update a gacha item
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                gacha_id:
                  type: string
                name:
                  type: string
                rarity:
                  type: string
                status:
                  type: string
                description:
                  type: string
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Gacha item updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Missing data to update gacha item

        '404':
          description: Gacha item not found
        '500':
          description: Failed to update gacha item
  /gacha/get/{gacha_id}:
    get:
      tags:
        - GACHA
      summary: Retrieve information about a specific gacha item
      parameters:
        - in: path
          name: gacha_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Gacha item retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  gacha_id:
                    type: string
                  name:
                    type: string
                  rarity:
                    type: string
                  status:
                    type: string
                  description:
                    type: string
                  image:
                    type: string
        '404':
          description: Gacha item not found

  /gacha/get/{user_id}/{gacha_id}:
    get:
      tags:
        - GACHA
      summary: Retrieve details of a specific gacha item for a specific user
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
        - in: path
          name: gacha_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Gacha item retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  gacha_id:
                    type: string
                  name:
                    type: string
                  rarity:
                    type: string
                  status:
                    type: string
                  description:
                    type: string
                  acquired_date:
                    type: string
                  locked:
                    type: boolean
                  image:
                    type: string
        '404':
          description: User not found or gacha item not found in user inventory
        
  /gacha/is_gacha_unlocked/{user_id}/{gacha_id}:
    get:
      tags:
        - GACHA
      summary: Check if a gacha item is unlocked for a user
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
        - in: path
          name: gacha_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Gacha item is unlocked
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '403':
          description: Gacha item is locked
        '400':
          description: Missing data to check gacha item
  /gacha/update_gacha_status:
    put:
      tags:
        - GACHA
      summary: Update the status of a gacha item for a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                gacha_id:
                  type: string
                status:
                  type: string
      responses:
        '200':
          description: Gacha status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Missing data to update gacha status
        '409':
          description: User not found
        '408':
          description: Gacha item not found
        '500':
          description: Failed to update gacha status
  /gacha/update_gacha_owner:
    put:
      tags:
        - GACHA
      summary: Update the owner of a gacha item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                buyer_id:
                  type: string
                seller_id:
                  type: string
                gacha_id:
                  type: string
                status:
                  type: string
      responses:
        '200':
          description: Gacha owner updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Missing data to update gacha owner
        '404':
          description: Buyer not found or gacha item not found
        '500':
          description: Failed to update gacha owner
  /gacha/delete/{gacha_id}:
    delete:
      tags:
      - GACHA
      summary: Delete a gacha item from the system (admin only)
      parameters:
        - name: gacha_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Gacha item successfully deleted
        '404':
          description: Gacha not found
        '500':
          description: Failed to delete gacha item