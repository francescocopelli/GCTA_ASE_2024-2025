# jobs:
# Job 1: Unit Testing
# unit_tests:
#   runs-on: ubuntu-latest
#   steps:
#     - name: Check out code
#       uses: actions/checkout@v2

#     - name: Set up Python
#       uses: actions/setup-python@v2
#       with:
#         python-version: '3.x' # Define version based on requirements

#     - name: Install dependencies
#       run: |
#         pip install -r requirements.txt

#     - name: Run Unit Tests
#       run: |
#         pytest path/to/your/tests/unit_tests

name: CI Pipeline

on:
  push:
    branches:
      - ci-testing-postman
      # - "feature/*"

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out code
      - name: Check out code
        uses: actions/checkout@v2

      # Step 2: Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Step 3: Create .env file for Docker Compose
      - name: Create environment file
        run: |
          echo "DEBUG_MODE=false" >> .env

      # Step 4: Build and start Docker Compose services
      - name: Build and start services
        run: |
          docker-compose up --build -d

      # Step 5: Wait for services to be ready
      - name: Wait for services to be ready
        run: |
          while ! nc -z localhost 8080; do
            echo "Waiting for gateway_user on port 8080..."
            sleep 2
          done
          echo "Services are ready!"

      # Step 6: Run Postman tests
      - name: Install Newman
        run: npm install -g newman
      - name: Run Postman Tests
        run: |
          newman run postman_tests/GCTA_Tests.postman_collection.json -e postman_tests/gcta_env.postman_environment.json

      # Step 7: Stop Docker Compose services
      - name: Stop Docker Compose services
        if: always()
        run: docker-compose down
