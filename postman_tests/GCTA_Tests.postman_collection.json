{
	"info": {
		"_postman_id": "375529fd-d272-403e-b77b-527eae112d87",
		"name": "GCTA_Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39570797"
	},
	"item": [
		{
			"name": "GCTA E2E",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random username, password, and email\r",
									"const randomUsername = 'user_' + Math.random().toString(36).substring(2, 10); // Random username\r",
									"const randomPassword = Math.random().toString(36).substring(2, 12); // Random password\r",
									"const randomEmail = randomUsername + '@example.com'; // Random email based on the username\r",
									"\r",
									"// Set them as environment variables for use in the request\r",
									"pm.environment.set(\"username\", randomUsername);\r",
									"pm.environment.set(\"password\", randomPassword);\r",
									"pm.environment.set(\"email\", randomEmail);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required field - message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{email}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://0.0.0.0:8080/users/auth/register",
							"protocol": "http",
							"host": [
								"0",
								"0",
								"0",
								"0"
							],
							"port": "8080",
							"path": [
								"users",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields - message and session_token\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('session_token');\r",
									"\r",
									"});\r",
									"\r",
									"// Extract and save the session token\r",
									"const response = pm.response.json();\r",
									"if (response.session_token) {\r",
									"    pm.environment.set(\"session_token\", response.session_token);\r",
									"    console.log(\"Session token saved:\", response.session_token);\r",
									"} else {\r",
									"    console.log(\"Session token not found in the response.\");\r",
									"}\r",
									"pm.test(\"User_id is extracted and saved to an environment variable\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property('user_id');\r",
									"    pm.environment.set(\"user_id\", response.user_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "http://gateway_user/users/auth/login",
							"protocol": "http",
							"host": [
								"gateway_user"
							],
							"path": [
								"users",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body should have the correct schema\", function () {\r",
									"  const responseData = pm.response.text();\r",
									"  pm.expect(responseData).to.include('Internal Server Error');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Retrieve the original email from the environment\r",
									"const originalEmail = pm.environment.get(\"email\");\r",
									"\r",
									"if (originalEmail) {\r",
									"    // Add \"updated\" in front of the original email\r",
									"    const updatedEmail = `updated_${originalEmail}`;\r",
									"    \r",
									"    // Save the updated email back to the environment\r",
									"    pm.environment.set(\"email\", updatedEmail);\r",
									"    console.log(\"Updated email saved:\", updatedEmail);\r",
									"} else {\r",
									"    console.log(\"Original email not found in the environment.\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\",\n  \"email\": \"{{email@email.com}}\",\n  \"image\": \"\"\n}"
						},
						"url": {
							"raw": "http://gateway_user/users/auth/update",
							"protocol": "http",
							"host": [
								"gateway_user"
							],
							"path": [
								"users",
								"auth",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Real Money Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  console.log(responseData.message)\r",
									"  pm.expect(responseData.message).to.equal(\"Transaction added successfully\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": \"{{user_id}}\",\n  \"amount\": 50\n}"
						},
						"url": {
							"raw": "http://gateway_user/users/player/real_money_transaction",
							"protocol": "http",
							"host": [
								"gateway_user"
							],
							"path": [
								"users",
								"player",
								"real_money_transaction"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required field - currency_balance\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.have.property('currency_balance');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Currency balance is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.currency_balance).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://gateway_user/users/player/get_user_balance/{{user_id}}",
							"protocol": "http",
							"host": [
								"gateway_user"
							],
							"path": [
								"users",
								"player",
								"get_user_balance",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "roll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains all required fields\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"message\");\r",
									"    pm.expect(responseJson).to.have.property(\"gacha_id\");\r",
									"    pm.expect(responseJson).to.have.property(\"name\");\r",
									"    pm.expect(responseJson).to.have.property(\"rarity\");\r",
									"});\r",
									"\r",
									"pm.test(\"Gacha rarity is valid\", function () {\r",
									"    const validRarities = [\"common\", \"rare\", \"epic\", \"legendary\"];\r",
									"    const rarity = pm.response.json().rarity;\r",
									"    pm.expect(validRarities).to.include(rarity);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains all required fields\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"message\");\r",
									"    pm.expect(responseJson).to.have.property(\"gacha_id\");\r",
									"    pm.expect(responseJson).to.have.property(\"name\");\r",
									"    pm.expect(responseJson).to.have.property(\"rarity\");\r",
									"\r",
									"    pm.environment.set(\"gacha_id\", responseJson.gacha_id);\r",
									"    console.log(responseJson.gacha_id);\r",
									"});\r",
									"\r",
									"pm.test(\"Gacha rarity is valid\", function () {\r",
									"    const validRarities = [\"common\", \"rare\", \"epic\", \"legendary\"];\r",
									"    const rarity = pm.response.json().rarity;\r",
									"    pm.expect(validRarities).to.include(rarity);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": \"{{user_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://gateway_user/gacha/roll",
							"protocol": "http",
							"host": [
								"gateway_user"
							],
							"path": [
								"gacha",
								"roll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function (transaction) {\r",
									"        pm.expect(transaction).to.have.property('amount');\r",
									"        pm.expect(transaction).to.have.property('transaction_date');\r",
									"        pm.expect(transaction).to.have.property('transaction_id');\r",
									"        pm.expect(transaction).to.have.property('transaction_type');\r",
									"        pm.expect(transaction).to.have.property('user_id');\r",
									"    });\r",
									"    console.log(responseData[0].transaction_id)\r",
									"    // Get the most recent transaction (last item in the array)\r",
									"    let latestTransaction = responseData[responseData.length - 1];\r",
									"    // Log the latest transaction ID\r",
									"    console.log(latestTransaction.transaction_id);\r",
									"    pm.environment.set(\"transaction_id\", latestTransaction.transaction_id);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Amount is a non-negative number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(function (transaction) {\r",
									"        pm.expect(transaction.amount).to.be.a('number').and.to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/transaction/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('amount');\r",
									"    pm.expect(responseData).to.have.property('transaction_date');\r",
									"    pm.expect(responseData).to.have.property('transaction_id');\r",
									"    pm.expect(responseData).to.have.property('transaction_type');\r",
									"    pm.expect(responseData).to.have.property('user_id');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Amount is a non-negative number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.amount).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/transaction/get_transaction?transaction_id={{transaction_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"get_transaction"
							],
							"query": [
								{
									"key": "transaction_id",
									"value": "{{transaction_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the response schema for required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(transaction) {\r",
									"        pm.expect(transaction).to.include.all.keys('amount', 'transaction_date', 'transaction_id', 'transaction_type', 'user_id');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/transaction/get_user_transactions?user_id={{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"get_user_transactions"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get One Gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful retrieval\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains gacha item details\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"gacha_id\");\r",
									"    pm.expect(responseJson).to.have.property(\"name\");\r",
									"    pm.expect(responseJson).to.have.property(\"rarity\");\r",
									"    pm.expect(responseJson).to.have.property(\"status\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.description).to.exist;\r",
									"  pm.expect(responseData.gacha_id).to.exist;\r",
									"  pm.expect(responseData.image).to.exist;\r",
									"  pm.expect(responseData.name).to.exist;\r",
									"  pm.expect(responseData.rarity).to.exist;\r",
									"  pm.expect(responseData.status).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Gacha id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.gacha_id).to.exist;\r",
									"    pm.expect(responseData.gacha_id).to.be.a('number');\r",
									"    pm.expect(responseData.gacha_id).to.satisfy((val) => val >= 0, \"Gacha id should be non-negative\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Name should be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should be a non-empty string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Rarity should be a valid value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const validRarities = [\"common\", \"rare\", \"epic\", \"legendary\"];\r",
									"    pm.expect(responseData.rarity).to.be.oneOf(validRarities, \"Rarity should be a valid value\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/get/{{gacha_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"get",
								"{{gacha_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Gachas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful retrieval\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Check that gachas have the correct data\r",
									"pm.test(\"Response contains gacha items array\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"message\").that.is.an(\"array\");\r",
									"    responseJson.message.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"gacha_id\");\r",
									"        pm.expect(item).to.have.property(\"name\");\r",
									"        pm.expect(item).to.have.property(\"rarity\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"// pm.test(\"Response time is within an acceptable range\", function () {\r",
									"//   pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"// });\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200 for successful retrieval\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - description, gacha_id, image, name, rarity, and status\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.be.an('array');\r",
									"\r",
									"    responseData.message.forEach(function (gacha) {\r",
									"        pm.expect(gacha).to.have.property('description');\r",
									"        pm.expect(gacha).to.have.property('gacha_id');\r",
									"        pm.expect(gacha).to.have.property('image');\r",
									"        pm.expect(gacha).to.have.property('name');\r",
									"        pm.expect(gacha).to.have.property('rarity');\r",
									"        pm.expect(gacha).to.have.property('status');\r",
									"    });\r",
									"    // console.log(responseData.message[6].gacha_id)\r",
									"    // pm.environment.set(\"gacha_id\", responseData.message[6].gacha_id);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Player Gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed response time test\r",
									"pm.test(\"Status code is 200 for successful update\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.acquired_date).to.exist;\r",
									"    pm.expect(responseData.description).to.exist;\r",
									"    pm.expect(responseData.gacha_id).to.exist;\r",
									"    pm.expect(responseData.image).to.exist;\r",
									"    pm.expect(responseData.locked).to.exist;\r",
									"    pm.expect(responseData.name).to.exist;\r",
									"    pm.expect(responseData.rarity).to.exist;\r",
									"    pm.expect(responseData.status).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Locked status is a boolean value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.locked).to.be.a('boolean');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/get/{{user_id}}/{{gacha_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"get",
								"{{user_id}}",
								"{{gacha_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful retrieval\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains inventory array\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"inventory\").that.is.an(\"array\");\r",
									"    responseJson.inventory.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"gacha_id\");\r",
									"        pm.expect(item).to.have.property(\"name\");\r",
									"        pm.expect(item).to.have.property(\"rarity\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200 for successful retrieval\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the structure of each item in the inventory array\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.inventory).to.be.an('array').that.is.not.empty;\r",
									"    \r",
									"    responseData.inventory.forEach(item => {\r",
									"        pm.expect(item.acquired_date).to.be.a('string');\r",
									"        pm.expect(item.description).to.be.a('string');\r",
									"        pm.expect(item.gacha_id).to.be.a('number');\r",
									"        pm.expect(item.image).to.be.a('string');\r",
									"        pm.expect(item.locked).to.be.a('boolean');\r",
									"        pm.expect(item.name).to.be.a('string');\r",
									"        pm.expect(item.rarity).to.be.a('string');\r",
									"        pm.expect(item.status).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Ensure all items in the inventory array have the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.inventory).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    responseData.inventory.forEach(function(item) {\r",
									"        pm.expect(item.acquired_date).to.be.a('string');\r",
									"        pm.expect(item.description).to.be.a('string');\r",
									"        pm.expect(item.gacha_id).to.be.a('number');\r",
									"        pm.expect(item.image).to.be.a('string');\r",
									"        pm.expect(item.locked).to.be.a('boolean');\r",
									"        pm.expect(item.name).to.be.a('string');\r",
									"        pm.expect(item.rarity).to.be.a('string');\r",
									"        pm.expect(item.status).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/inventory/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"inventory",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Auction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response schema matches the expected schema\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('email');\r",
									"    pm.expect(responseData).to.have.property('address');\r",
									"    pm.expect(responseData).to.have.property('phone');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"gacha_id\": \"{{gacha_id}}\",\n  \"seller_id\": \"{{user_id}}\",\n  \"base_price\": 7\n}"
						},
						"url": {
							"raw": "{{base_url}}/auction/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Auctions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.auctions).to.be.an('array');\r",
									"    responseData.auctions.forEach(function (auction) {\r",
									"        pm.expect(auction.auction_id).to.exist;\r",
									"        pm.expect(auction.base_price).to.exist;\r",
									"        // pm.expect(auction.buyer_id).to.exist;\r",
									"        pm.expect(auction.end_time).to.exist;\r",
									"        pm.expect(auction.gacha_id).to.exist;\r",
									"        pm.expect(auction.highest_bid).to.exist;\r",
									"        pm.expect(auction.seller_id).to.exist;\r",
									"        pm.expect(auction.status).to.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Save the auction_id of the last auction\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const lastAuction = responseData.auctions[responseData.auctions.length - 1];\r",
									"    pm.environment.set(\"last_auction_id\", lastAuction.auction_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Gacha Auctions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function (auction) {\r",
									"        pm.expect(auction.auction_id).to.exist;\r",
									"        pm.expect(auction.base_price).to.exist;\r",
									"        pm.expect(auction.buyer_id).to.exist;\r",
									"        pm.expect(auction.end_time).to.exist;\r",
									"        pm.expect(auction.gacha_id).to.exist;\r",
									"        pm.expect(auction.highest_bid).to.exist;\r",
									"        pm.expect(auction.seller_id).to.exist;\r",
									"        pm.expect(auction.status).to.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Auction_id is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(function (auction) {\r",
									"        pm.expect(auction.auction_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Auction_id should not be empty\");\r",
									"\r",
									"        console.log(responseData[0].auction_id)\r",
									"        pm.environment.set(\"auction_id\", responseData[0].auction_id)\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Highest_bid is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(function (auction) {\r",
									"        pm.expect(auction.highest_bid).to.be.a('number');\r",
									"        pm.expect(auction.highest_bid).to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the schema of the response body\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function (item) {\r",
									"        pm.expect(item).to.be.an('object');\r",
									"        pm.expect(item.auction_id).to.be.a('string');\r",
									"        pm.expect(item.base_price).to.be.a('number');\r",
									"        pm.expect(item.buyer_id).to.be.a('number');\r",
									"        pm.expect(item.end_time).to.be.a('number');\r",
									"        pm.expect(item.gacha_id).to.be.a('number');\r",
									"        pm.expect(item.highest_bid).to.be.a('number');\r",
									"        pm.expect(item.seller_id).to.be.a('number');\r",
									"        pm.expect(item.status).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction//get_gacha_auctions?gacha_id={{gacha_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"",
								"get_gacha_auctions"
							],
							"query": [
								{
									"key": "gacha_id",
									"value": "{{gacha_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Place Bid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response schema matches the expected schema\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message field is present in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"auction_id\": \"{{auction_id}}\",\n  \"user_id\": \"1\",\n  \"bid_amount\": 13\n}"
						},
						"url": {
							"raw": "{{base_url}}/auction/bid",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"bid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Bids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.bids).to.be.an('array');\r",
									"    \r",
									"    responseData.bids.forEach(function(bid) {\r",
									"        pm.expect(bid.auction_id).to.exist;\r",
									"        pm.expect(bid.bid_amount).to.exist;\r",
									"        pm.expect(bid.bid_id).to.exist;\r",
									"        pm.expect(bid.bid_time).to.exist;\r",
									"        pm.expect(bid.user_id).to.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Bids array is present and contains expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.bids).to.exist.and.to.be.an('array');\r",
									"    pm.expect(responseData.bids.length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Bids data properties validation\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.bids).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    responseData.bids.forEach(function(bid) {\r",
									"        pm.expect(bid.auction_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Auction ID should be a non-empty string\");\r",
									"        pm.expect(bid.bid_amount).to.be.a('number').and.to.be.at.least(0, \"Bid amount should be a non-negative integer\");\r",
									"        pm.expect(bid.bid_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Bid ID should be a non-empty string\");\r",
									"        pm.expect(bid.user_id).to.be.a('number').and.to.be.at.least(0, \"User ID should be a non-negative integer\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction//bids?auction_id={{last_auction_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"",
								"bids"
							],
							"query": [
								{
									"key": "auction_id",
									"value": "{{last_auction_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"session_token\": \"{{session_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GCTA Negative Tests",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400 for invalid input\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400); // Adjust expected code based on API behavior\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is provided\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.exist;\r",
									"    pm.expect(response.message).to.include(\"Invalid input\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "invalidemail",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/users/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401 for incorrect credentials\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"Invalid credentials\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"nonexistentuser\",\n    \"password\": \"somepassword\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body should have the correct schema\", function () {\r",
									"  const responseData = pm.response.text();\r",
									"  pm.expect(responseData).to.include('Internal Server Error');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Retrieve the original email from the environment\r",
									"const originalEmail = pm.environment.get(\"email\");\r",
									"\r",
									"if (originalEmail) {\r",
									"    // Add \"updated\" in front of the original email\r",
									"    const updatedEmail = `updated_${originalEmail}`;\r",
									"    \r",
									"    // Save the updated email back to the environment\r",
									"    pm.environment.set(\"email\", updatedEmail);\r",
									"    console.log(\"Updated email saved:\", updatedEmail);\r",
									"} else {\r",
									"    console.log(\"Original email not found in the environment.\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\",\n  \"email\": \"{{email@email.com}}\",\n  \"image\": \"\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/auth/update",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Real Money Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"401 Unauthorized: Token expired!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": \"9999999999\",\n  \"amount\": 50\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/player/real_money_transaction",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"player",
								"real_money_transaction"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"401 Unauthorized: Token expired!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/player/get_user_balance/9999999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"player",
								"get_user_balance",
								"9999999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "roll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"401 Unauthorized: Token expired!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": \"9999999999\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/gacha/roll",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"roll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"401 Unauthorized: Token expired!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/transaction/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"Transaction not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/transaction/get_transaction?transaction_id=9999999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"get_transaction"
							],
							"query": [
								{
									"key": "transaction_id",
									"value": "9999999999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"No transactions found for the user\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/transaction/get_user_transactions?user_id=9999999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"get_user_transactions"
							],
							"query": [
								{
									"key": "user_id",
									"value": "9999999999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get One Gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"Gacha item not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/get/9999999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"get",
								"9999999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Gachas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"Gacha item not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Player Gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"401 Unauthorized\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/get/{{user_id}}/99999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"get",
								"{{user_id}}",
								"99999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"401 Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/gacha/inventory/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gacha",
								"inventory",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Auction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"Gacha is locked or does not exist\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"gacha_id\": \"noexistentgacha\",\n  \"seller_id\": \"{{user_id}}\",\n  \"base_price\": 7\n}"
						},
						"url": {
							"raw": "{{base_url}}/auction/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Auctions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"401 Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Gacha Auctions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"No auctions found for the gacha\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction//get_gacha_auctions?gacha_id=999999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"",
								"get_gacha_auctions"
							],
							"query": [
								{
									"key": "gacha_id",
									"value": "999999999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Place Bid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"Auction not found or already ended\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"auction_id\": \"99999999\",\n  \"user_id\": \"1\",\n  \"bid_amount\": 13\n}"
						},
						"url": {
							"raw": "{{base_url}}/auction/bid",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"bid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Bids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates wrong parameters\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"Missing auction_id parameter\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auction/bids?auction_id=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auction",
								"bids"
							],
							"query": [
								{
									"key": "auction_id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message indicates unauthorized access\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"401 Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"session_token\": \"nosession\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}